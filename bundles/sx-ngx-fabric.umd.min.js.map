{"version":3,"file":"sx-ngx-fabric.umd.min.js","sources":["../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/operators/windowTime.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/nav/nav.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/nav/nav.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/breadcrumb/breadcrumb.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/breadcrumb/breadcrumb.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/utils/guid.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/toggle/toggle.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/toggle/toggle.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/text-field/text-field.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/text-field/text-field.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/button/button.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/button/button.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/checkbox/checkbox.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/checkbox/checkbox.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-container.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-ref.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-tokens.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog.service.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-content.directive.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/callout/callout.component.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/operators/index.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/callout/callout-trigger.directive.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/callout/callout.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/sx-ngx-fabric.module.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Component, OnInit } from '@angular/core';\nexport class NavComponent implements OnInit {\nconstructor() { }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-nav',\n  template: `\n    <div class=\"ms-Nav-group group is-expanded groupIsExpanded\">\n      <div class=\"ms-Nav-groupContent groupContent\">\n        <ul role=\"list\" class=\"navItems\">\n          <li role=\"listitem\" class=\"navItem\">\n            <div name=\"Home\" class=\"ms-Nav-compositeLink compositeLink is-expanded compositeLinkIsExpanded\">\n              <button class=\"ms-Nav-chevronButton ms-Nav-chevronButton--link chevronButton chevronButtonLink\"\n                aria-expanded=\"true\" tabindex=\"0\">\n                <i role=\"presentation\" aria-hidden=\"true\" data-icon-name=\"ChevronDown\" class=\"ms-Icon ms-Nav-chevron chevronIcon\"></i>\n              </button>\n              <a class=\"ms-Nav-linkButton link isOnExpanded ms-Button ms-Button--action ms-Button--command\" href=\"http://example.com\"\n                title=\"Home\" tabindex=\"-1\">\n                <div class=\"ms-Button-flexContainer\">\n                  <i role=\"presentation\" aria-hidden=\"true\" class=\"ms-Icon ms-Icon-placeHolder ms-Button-icon\"></i>\n                  <div class=\"ms-Button-textContainer\"></div>\n                  <div class=\"ms-Nav-linkText linkText\">Home</div>\n                </div>\n              </a>\n            </div>\n            <ul role=\"list\" class=\"navItems\">\n              <li role=\"listitem\" class=\"navItem\">\n                <div name=\"Activity\" class=\"ms-Nav-compositeLink compositeLink\">\n                  <a class=\"ms-Nav-linkButton link isOnExpanded ms-Button ms-Button--action ms-Button--command\"\n                    href=\"http://msn.com\" title=\"Activity\" data-is-focusable=\"true\" tabindex=\"-1\">\n                    <div class=\"ms-Button-flexContainer\">\n                      <i role=\"presentation\" aria-hidden=\"true\" class=\"ms-Icon ms-Icon-placeHolder ms-Button-icon\"></i>\n                      <div class=\"ms-Button-textContainer\"></div>\n                      <div class=\"ms-Nav-linkText linkText\">Activity</div>\n                    </div>\n                  </a>\n                </div>\n              </li>\n            </ul>\n          </li>\n          <li role=\"listitem\" class=\"navItem\" >\n            <div name=\"Documents\" class=\"ms-Nav-compositeLink compositeLink is-expanded is-selected compositeLinkIsExpanded compositeLinkIsSelected\">\n              <a class=\"ms-Nav-linkButton link isOnExpanded ms-Button ms-Button--action ms-Button--command\" href=\"http://example.com\"\n                title=\"Documents\" data-is-focusable=\"true\"tabindex=\"-1\">\n                <div class=\"ms-Button-flexContainer\">\n                  <i role=\"presentation\" aria-hidden=\"true\" class=\"ms-Icon ms-Icon-placeHolder ms-Button-icon\"></i>\n                  <div class=\"ms-Button-textContainer\"></div>\n                  <div class=\"ms-Nav-linkText\">Documents</div>\n                </div>\n              </a>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NavComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNavComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNavComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NavComponent } from './nav.component';\nexport class NavModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NavComponent\n  ],\n  exports: [\n    NavComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNavModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { IBreadcrumbItem } from './i-breadcrumb-item';\nexport class BreadcrumbComponent {\n\n   items: Array<IBreadcrumbItem>;\n\n   itemClick = new EventEmitter<IBreadcrumbItem>();\nconstructor() { }\n/**\n * @param {?} item\n * @return {?}\n */\nonClick(item: IBreadcrumbItem) {\n    this.itemClick.next(item);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-breadcrumb',\n  template: `\n    <div class=\"ms-Breadcrumb\">\n        <div class=\"ms-Breadcrumb-overflow\">\n          <div class=\"ms-Breadcrumb-overflowButton ms-Icon ms-Icon--ellipsis\" tabindex=\"1\"></div>\n          <i class=\"ms-Breadcrumb-chevron ms-Icon ms-Icon--ChevronRight\"></i>\n          <div class=\"ms-Breadcrumb-overflowMenu\">\n            <ul class=\"ms-ContextualMenu is-open\"></ul>\n          </div>\n        </div>\n        <ul class=\"ms-Breadcrumb-list\">\n          <li class=\"ms-Breadcrumb-listItem\" *ngFor='let item of items'>\n              <a class=\"ms-Breadcrumb-itemLink\" tabindex=\"2\" (click)=\"onClick(item)\" [attr.title]=\"item.text\">{{item.text}}</a>\n              <i class=\"ms-Breadcrumb-chevron ms-Icon ms-Icon--ChevronRight\"></i>\n          </li>\n        </ul>\n      </div>\n  `,\n  styles: [`\n    .ms-Breadcrumb {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      margin: 23px 0 1px; }\n\n    .ms-Breadcrumb-overflow {\n      display: none;\n      position: relative; }\n\n    .ms-Breadcrumb-list {\n      white-space: nowrap;\n      padding: 0;\n      margin: 0;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: stretch;\n      -ms-flex-align: stretch;\n      align-items: stretch; }\n\n    .ms-Breadcrumb-list .ms-Breadcrumb-listItem {\n      list-style-type: none;\n      margin: 0;\n      padding: 0;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      position: relative;\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n      align-items: center; }\n\n    .ms-Breadcrumb-itemLink {\n      font-size: 21px;\n      font-weight: 100;\n      color: #333333;\n      padding: 0 8px;\n      max-width: 160px;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      padding-bottom: 3px; }\n\n    .ms-Breadcrumb-itemLink, .ms-Breadcrumb-overflowButton {\n      text-decoration: none;\n      outline: transparent; }\n\n    .ms-Breadcrumb-chevron {\n      font-size: 12px;\n      color: #666666; }\n\n    .ms-Icon--ChevronRight:before {\n      content: '\\\\E76C'; }\n\n    .ms-Breadcrumb-itemLink:hover, .ms-Breadcrumb-overflowButton:hover {\n      background-color: #f8f8f8;\n      cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'items': [{ type: Input },],\n'itemClick': [{ type: Output },],\n};\n}\n\nfunction BreadcrumbComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nBreadcrumbComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBreadcrumbComponent.ctorParameters;\n/** @type {?} */\nBreadcrumbComponent.propDecorators;\n/** @type {?} */\nBreadcrumbComponent.prototype.items;\n/** @type {?} */\nBreadcrumbComponent.prototype.itemClick;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreadcrumbComponent } from './breadcrumb.component';\nexport class BreadcrumbModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    BreadcrumbComponent\n  ],\n  exports: [\n    BreadcrumbComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BreadcrumbModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBreadcrumbModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBreadcrumbModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class Guid {\n/**\n * @return {?}\n */\nstatic uniqueid() {\n        // always start with a letter (for DOM friendlyness)\n        let /** @type {?} */ idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));\n        do {\n            // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n            const /** @type {?} */ ascicode = Math.floor((Math.random() * 42) + 48);\n            if (ascicode < 58 || ascicode > 64) {\n                // exclude all chars between : (58) and @ (64)\n                idstr += String.fromCharCode(ascicode);\n            }\n        } while (idstr.length < 32);\n\n        return (idstr);\n    }\n}","import { Component, OnInit, Input, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { Guid } from '../utils/guid';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class ToggleComponent {\nprivate _checked = false;\n/**\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked !== this.checked) {\n      this._checked = checked;\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n   disabled = false;\n\n   offText = 'Off';\n\n   onText = 'On';\n\n   textLeft = false;\n/**\n * @return {?}\n */\nget classIsDisabled() { return this.disabled; }\n/**\n * @return {?}\n */\nget classTextLeft() { return this.textLeft; }\n\n  inputId = Guid.uniqueid();\n/**\n * @param {?} changeDetectorRef\n */\nconstructor(\nprivate changeDetectorRef: ChangeDetectorRef\n  ) { }\n/**\n * @param {?} evt\n * @return {?}\n */\nonInputClick(evt: MouseEvent) {\n    evt.stopPropagation();\n    this.toggle();\n  }\n/**\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.changeDetectorRef.markForCheck();\n  }\nprivate _onChange = (_: any) => { };\nprivate _onTouched = () => { };\n/**\n * @param {?} val\n * @return {?}\n */\npublic writeValue(val: any) {\n    this.checked = val;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => void): void { this._onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => void): void { this._onTouched = fn; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-toggle',\n  template: `\n    <span class=\"ms-Toggle-description\"><ng-content></ng-content></span>\n    <input type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (click)=\"onInputClick($event)\" [disabled]=\"disabled\" class=\"ms-Toggle-input\" />\n    <label [attr.for]=\"inputId\" class=\"ms-Toggle-field\" [class.is-selected]=\"checked\">\n      <span class=\"ms-Label ms-Label--off\">{{ offText }}</span>\n      <span class=\"ms-Label ms-Label--on\">{{ onText }}</span>\n    </label>\n  `,\n  styles: [`\n    :host.ms-Toggle {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      font-weight: 400;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      position: relative;\n      display: block;\n      margin-bottom: 8px; }\n\n    .ms-Toggle-description {\n      color: #333333;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      margin-top: 0px;\n      margin-right: 0px;\n      margin-bottom: 0px;\n      margin-left: 0px;\n      display: block;\n      padding-top: 5px;\n      padding-right: 0px;\n      padding-bottom: 5px;\n      padding-left: 0px;\n      word-wrap: break-word;\n      overflow-wrap: break-word; }\n\n    .ms-Toggle-input {\n      display: none; }\n\n    .ms-Toggle-field {\n      position: relative;\n      display: inline-block;\n      width: 45px;\n      height: 20px;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      border: 1px solid #a6a6a6;\n      border-radius: 20px;\n      cursor: pointer;\n      -webkit-transition: all 0.1s ease;\n      transition: all 0.1s ease;\n      outline: 0; }\n\n    :host.ms-Toggle .ms-Toggle-field:before {\n      position: absolute;\n      top: 4px;\n      width: 10px;\n      height: 10px;\n      border-radius: 10px;\n      content: '';\n      left: 4px;\n      background-color: #333333;\n      outline: 1px solid transparent;\n      -webkit-transition: all 0.1s ease;\n      transition: all 0.1s ease; }\n\n    :host.ms-Toggle .ms-Label {\n      position: relative;\n      padding: 0 0 0 50px; }\n\n    :host.ms-Toggle .ms-Toggle-field .ms-Label {\n      color: #000;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; }\n\n    :host.ms-Toggle .ms-Toggle-field .ms-Label--off {\n      display: block; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected .ms-Label--off {\n      display: none; }\n\n    :host.ms-Toggle .ms-Toggle-field .ms-Label--on {\n      display: none; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected .ms-Label--on {\n      display: block; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected {\n      background-color: #0078d7;\n      border-color: #0078d7; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected:focus, :host.ms-Toggle .ms-Toggle-field.is-selected:hover {\n      background-color: #106ebe;\n      border-color: #106ebe; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected:before {\n      background-color: #fff;\n      left: 28px; }\n\n    :host.ms-Toggle.is-disabled .ms-Toggle-field {\n      background-color: #fff;\n      border-color: #c8c8c8;\n      pointer-events: none;\n      cursor: default; }\n\n    :host.ms-Toggle.is-disabled .ms-Toggle-field.is-selected {\n      background-color: #c8c8c8; }\n\n    :host.ms-Toggle.is-disabled .ms-Toggle-field:before {\n      background-color: #fff; }\n\n    :host.ms-Toggle.is-disabled .ms-Label {\n      color: #a6a6a6; }\n\n    :host.ms-Toggle.ms-Toggle--textLeft {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex; }\n\n    :host.ms-Toggle.ms-Toggle--textLeft .ms-Toggle-field {\n      margin-right: 24px; }\n\n    :host.ms-Toggle.ms-Toggle--textLeft .ms-Toggle-description {\n      -webkit-box-flex: 1;\n          -ms-flex: auto;\n              flex: auto; }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleComponent),\n    multi: true\n  }],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'ms-Toggle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'checked': [{ type: Input },],\n'disabled': [{ type: Input },],\n'offText': [{ type: Input },],\n'onText': [{ type: Input },],\n'textLeft': [{ type: Input },],\n'classIsDisabled': [{ type: HostBinding, args: ['class.is-disabled', ] },],\n'classTextLeft': [{ type: HostBinding, args: ['class.ms-Toggle--textLeft', ] },],\n};\n}\n\nfunction ToggleComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nToggleComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToggleComponent.ctorParameters;\n/** @type {?} */\nToggleComponent.propDecorators;\n/** @type {?} */\nToggleComponent.prototype._checked;\n/** @type {?} */\nToggleComponent.prototype.disabled;\n/** @type {?} */\nToggleComponent.prototype.offText;\n/** @type {?} */\nToggleComponent.prototype.onText;\n/** @type {?} */\nToggleComponent.prototype.textLeft;\n/** @type {?} */\nToggleComponent.prototype.inputId;\n/** @type {?} */\nToggleComponent.prototype._onChange;\n/** @type {?} */\nToggleComponent.prototype._onTouched;\n/** @type {?} */\nToggleComponent.prototype.changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToggleComponent } from './toggle.component';\nexport class ToggleModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ToggleComponent\n  ],\n  exports: [\n    ToggleComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, HostBinding, Input, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef, Optional } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\nexport class TextFieldComponent {\n\n   label;\n\n   multiline = false;\n\n   rows = 3;\n\n   type = 'text';\n\n   placeholder;\n\n   disabled = false;\n\n   required = false;\n\n  value = null;\n\n   classes = 'ms-TextField';\n/**\n * @return {?}\n */\nget classMultiline() { return this.multiline; }\n/**\n * @return {?}\n */\nget classIsDisabled() { return this.disabled; }\n/**\n * @param {?} changeDetectorRef\n */\nconstructor(\nprivate changeDetectorRef: ChangeDetectorRef\n  ) { }\n/**\n * @param {?} evt\n * @return {?}\n */\nonChange(evt) {\n    evt.stopPropagation();\n    this.value = evt.target.value;\n    this._onChange(this.value);\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\nonTouched(evt) {\n    this._onTouched();\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.changeDetectorRef.markForCheck();\n  }\nprivate _onChange = (_: any) => { };\nprivate _onTouched = () => { };\n/**\n * @param {?} val\n * @return {?}\n */\npublic writeValue(val: any) {\n    this.value = val;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => void): void { this._onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => void): void { this._onTouched = fn; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-text-field',\n  template: `\n    <label class=\"ms-Label\" [class.is-required]=\"required\">{{label}}</label>\n    <input class=\"ms-TextField-field\"\n      *ngIf=\"!multiline\"\n      [attr.type]=\"type\" \n      [attr.placeholder]=\"placeholder\" \n      [value]=\"value\" \n      [disabled]=\"disabled\" \n      (blur)=\"onTouched($event)\"\n      (change)=\"onChange($event)\" \n      (keyup)=\"onChange($event)\"\n    />\n\n    <textarea class=\"ms-TextField-field\"\n    *ngIf=\"multiline\"\n    [attr.type]=\"type\" \n    [attr.placeholder]=\"placeholder\" \n    [value]=\"value\" \n    [disabled]=\"disabled\"\n    [attr.rows]=\"rows\"\n    (blur)=\"onTouched($event)\"\n    (change)=\"onChange($event)\" \n    (keyup)=\"onChange($event)\"\n    ></textarea>\n  `,\n  styles: [`\n    :host.ms-TextField {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      color: #333333;\n      font-size: 14px;\n      font-weight: 400;\n      margin-bottom: 8px; }\n\n    .ms-Label {\n      font-size: 14px;\n      font-weight: 600; }\n\n    .ms-TextField-field {\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      border: 1px solid #c8c8c8;\n      border-radius: 0;\n      font-weight: 300;\n      font-size: 14px;\n      color: #333333;\n      height: 32px;\n      padding: 6px 12px 7px;\n      width: 100%;\n      min-width: 180px;\n      outline: 0;\n      text-overflow: ellipsis; }\n\n    :host.ms-TextField.ms-TextField--multiline .ms-TextField-field {\n      color: #333333;\n      font-size: 14px;\n      line-height: 17px;\n      min-height: 60px;\n      min-width: 260px;\n      padding-top: 6px;\n      overflow: auto; }\n\n    :host.ms-TextField.is-disabled .ms-TextField-field {\n      background-color: #f4f4f4;\n      border-color: #f4f4f4;\n      pointer-events: none;\n      cursor: default; }\n\n    .ms-TextField-field:hover {\n      border-color: #333333; }\n\n    .ms-TextField-field:active, .ms-TextField-field:focus {\n      border-color: #0078d7; }\n\n    :host.ms-TextField.ng-invalid.ng-touched .ms-TextField-field {\n      border-color: #a80000; }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TextFieldComponent),\n    multi: true\n  }],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'multiline': [{ type: Input },],\n'rows': [{ type: Input },],\n'type': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'classes': [{ type: HostBinding, args: ['class', ] },],\n'classMultiline': [{ type: HostBinding, args: ['class.ms-TextField--multiline', ] },],\n'classIsDisabled': [{ type: HostBinding, args: ['class.is-disabled', ] },],\n};\n}\n\nfunction TextFieldComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTextFieldComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTextFieldComponent.ctorParameters;\n/** @type {?} */\nTextFieldComponent.propDecorators;\n/** @type {?} */\nTextFieldComponent.prototype.label;\n/** @type {?} */\nTextFieldComponent.prototype.multiline;\n/** @type {?} */\nTextFieldComponent.prototype.rows;\n/** @type {?} */\nTextFieldComponent.prototype.type;\n/** @type {?} */\nTextFieldComponent.prototype.placeholder;\n/** @type {?} */\nTextFieldComponent.prototype.disabled;\n/** @type {?} */\nTextFieldComponent.prototype.required;\n/** @type {?} */\nTextFieldComponent.prototype.value;\n/** @type {?} */\nTextFieldComponent.prototype.classes;\n/** @type {?} */\nTextFieldComponent.prototype._onChange;\n/** @type {?} */\nTextFieldComponent.prototype._onTouched;\n/** @type {?} */\nTextFieldComponent.prototype.changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TextFieldComponent } from './text-field.component';\nexport class TextFieldModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TextFieldComponent\n  ],\n  exports: [\n    TextFieldComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TextFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTextFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTextFieldModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { HostBinding } from '@angular/core';\nexport class ButtonComponent implements OnInit {\n\n   primary = false;\n\n   classes = true;\n/**\n * @return {?}\n */\nget classPrimary() { return this.primary; }\nconstructor() { }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button[sx-ngx-fabric-button], a[sx-ngx-fabric-button]',\n  styles: [`\n    :host:hover {\n      background-color: #eaeaea;\n      border: 1px solid #eaeaea; }\n\n    :host, :host:active {\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      color: #333;\n      font-size: 14px;\n      font-weight: 400;\n      background-color: #f4f4f4;\n      border: 1px solid #f4f4f4;\n      cursor: pointer;\n      display: inline-block;\n      height: 32px;\n      min-width: 80px;\n      padding: 4px 20px 6px;\n      outline: none;\n      text-align: center; }\n\n    .ms-Button-label {\n      color: #333;\n      font-weight: 600;\n      font-size: 14px; }\n\n    :host.ms-Button--primary:hover {\n      background-color: #005a9e;\n      border-color: #005a9e; }\n\n    :host.ms-Button--primary, :host.ms-Button--primary:active {\n      background-color: #0078d7;\n      border-color: #0078d7; }\n\n    :host.ms-Button--primary .ms-Button-label {\n      color: #fff; }\n\n    :host[disabled], :host[disabled]:hover, :host[disabled]:active {\n      cursor: default;\n      background-color: #f4f4f4;\n      border-color: #f4f4f4; }\n\n    :host[disabled] .ms-Button-label {\n      color: #a6a6a6; }\n  `],\n  template: `\n    <div class=\"ms-Button-label\"><ng-content></ng-content></div>\n  `,\n  // host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'primary': [{ type: Input },],\n'classes': [{ type: HostBinding, args: ['class.ms-Button', ] },],\n'classPrimary': [{ type: HostBinding, args: ['class.ms-Button--primary', ] },],\n};\n}\n\nfunction ButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonComponent.ctorParameters;\n/** @type {?} */\nButtonComponent.propDecorators;\n/** @type {?} */\nButtonComponent.prototype.primary;\n/** @type {?} */\nButtonComponent.prototype.classes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './button.component';\nexport class ButtonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ButtonComponent\n  ],\n  exports: [\n    ButtonComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { Guid } from '../utils/guid';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class CheckboxComponent {\nprivate _checked = false;\n/**\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked !== this.checked) {\n      this._checked = checked;\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n   disabled = false;\n\n  inputId = Guid.uniqueid();\n/**\n * @param {?} changeDetectorRef\n */\nconstructor(\nprivate changeDetectorRef: ChangeDetectorRef\n  ) { }\n/**\n * @param {?} evt\n * @return {?}\n */\nonInputClick(evt: MouseEvent) {\n    evt.stopPropagation();\n    this.toggle();\n  }\n/**\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.changeDetectorRef.markForCheck();\n  }\nprivate _onChange = (_: any) => { };\nprivate _onTouched = () => { };\n/**\n * @param {?} val\n * @return {?}\n */\npublic writeValue(val: any) {\n    this.checked = val;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => void): void { this._onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => void): void { this._onTouched = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-checkbox',\n  template: `\n    <input type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (click)=\"onInputClick($event)\" [disabled]=\"disabled\"/>\n    <label role=\"checkbox\" [attr.for]=\"inputId\" [class.is-checked]=\"checked\" [class.disabled]=\"disabled\">\n      <span class=\"ms-label\"><ng-content></ng-content></span>\n    </label>\n  `,\n  styles: [`\n    :host {\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      color: #333333;\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      min-height: 36px;\n      position: relative; }\n\n    input {\n      position: absolute;\n      opacity: 0; }\n\n    label {\n      display: inline-block;\n      cursor: pointer;\n      margin-top: 8px;\n      position: relative;\n      outline: 0;\n      vertical-align: top; }\n\n    label:hover {\n      color: #000000; }\n\n    label:before {\n      content: '';\n      display: inline-block;\n      border: 1px solid #a6a6a6;\n      width: 20px;\n      height: 20px;\n      cursor: pointer;\n      font-weight: 400;\n      position: absolute;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-transition-property: background, border, border-color;\n      transition-property: background, border, border-color;\n      -webkit-transition-duration: 200ms;\n              transition-duration: 200ms;\n      -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.23, 1);\n              transition-timing-function: cubic-bezier(0.4, 0, 0.23, 1); }\n\n    label:hover:before {\n      border: 1px solid #333333; }\n\n    label.disabled {\n      color: #c8c8c8; }\n\n    label.disabled:before, label.disabled:hover:before {\n      border: 1px solid #c8c8c8; }\n\n    label.is-checked:before {\n      border: 10px solid #0078d7;\n      background-color: #0078d7; }\n\n    label.is-checked:hover:before {\n      border: 10px solid #106ebe;\n      background-color: #106ebe; }\n\n    label.disabled.is-checked:before, label.disabled.is-checked:hover:before {\n      border: 10px solid #c8c8c8;\n      background-color: #c8c8c8; }\n\n    label:after {\n      content: '\\\\E73E';\n      font-family: FabricMDL2Icons;\n      display: none;\n      position: absolute;\n      font-weight: 900;\n      background-color: transparent;\n      font-size: 13px;\n      top: 0;\n      color: #fff;\n      line-height: 20px;\n      width: 20px;\n      text-align: center; }\n\n    label.is-checked:after {\n      display: block; }\n\n    .ms-label {\n      font-size: 14px;\n      padding: 0 0 0 26px;\n      cursor: pointer;\n      display: inline-block; }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n  }],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'checked': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction CheckboxComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxComponent.ctorParameters;\n/** @type {?} */\nCheckboxComponent.propDecorators;\n/** @type {?} */\nCheckboxComponent.prototype._checked;\n/** @type {?} */\nCheckboxComponent.prototype.disabled;\n/** @type {?} */\nCheckboxComponent.prototype.inputId;\n/** @type {?} */\nCheckboxComponent.prototype._onChange;\n/** @type {?} */\nCheckboxComponent.prototype._onTouched;\n/** @type {?} */\nCheckboxComponent.prototype.changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckboxComponent } from './checkbox.component';\nexport class CheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CheckboxComponent\n  ],\n  exports: [\n    CheckboxComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, ViewEncapsulation, ViewChild, ComponentRef, EmbeddedViewRef, Optional, Inject, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { CdkPortalOutlet, BasePortalOutlet, TemplatePortal, CdkPortal } from '@angular/cdk/portal';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { SxNgxFabricDialogConfig } from './dialog-config';\nimport { DOCUMENT } from '@angular/platform-browser';\nexport class SxNgxDialogContainerComponent extends BasePortalOutlet {\n/**\n * The portal outlet inside of this container into which the dialog content will be loaded.\n */\n_portalOutlet: CdkPortalOutlet;\n\n  _config: SxNgxFabricDialogConfig;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any\n  ) {\n    super();\n  }\n/**\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    // if (this._portalOutlet.hasAttached()) {\n    //   throw new Error('Has already attached')\n    // }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n/**\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    throw new Error('Method not implemented.');\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-dialog-container',\n  template: `\n    <ng-template #portalOutlet=\"cdkPortalOutlet\" cdkPortalOutlet ></ng-template>\n  `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalOutlet': [{ type: ViewChild, args: ['portalOutlet', ] },],\n};\n}\n\nfunction SxNgxDialogContainerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxDialogContainerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxDialogContainerComponent.ctorParameters;\n/** @type {?} */\nSxNgxDialogContainerComponent.propDecorators;\n/**\n * The portal outlet inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nSxNgxDialogContainerComponent.prototype._portalOutlet;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._config;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._elementRef;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._changeDetectorRef;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/take';\nexport class SxNgxFabricDialogRef<T> {\nprivate _beforeClose = new Subject<void>();\nprivate _afterClosed = new Subject<void>();\n\n    componentInstance: T;\n/**\n * @param {?} overlayRef\n */\nconstructor(private overlayRef: OverlayRef) { }\n/**\n * @param {?=} value\n * @return {?}\n */\nclose(value?: any): void {\n        this.overlayRef.dispose();\n        this._afterClosed.next(value);\n        this._afterClosed.complete();\n        this.componentInstance = null;\n\n        // this.componentInstance.animationStateChanged\n        //   .filter(event => event.phaseName === 'start')\n        //   .take(1)\n        //   .subscribe(() => {\n        //     this._beforeClose.next();\n        //     this._beforeClose.complete();\n        //     this.overlayRef.detachBackdrop();\n        //   });\n\n        // this.componentInstance.animationStateChanged\n        //   .filter(event => event.phaseName === 'done' && event.toState === 'leave')\n        //   .take(1)\n        //   .subscribe(() => {\n        //     this.overlayRef.dispose();\n        //     this._afterClosed.next();\n        //     this._afterClosed.complete();\n        //     this.componentInstance = null;\n        //   });\n\n        // this.componentInstance.startExitAnimation();\n    }\n/**\n * @return {?}\n */\nafterClosed(): Observable<void> {\n        return this._afterClosed.asObservable();\n    }\n/**\n * @return {?}\n */\nbeforeClose(): Observable<void> {\n        return this._beforeClose.asObservable();\n    }\n}\n\nfunction SxNgxFabricDialogRef_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogRef.prototype._beforeClose;\n/** @type {?} */\nSxNgxFabricDialogRef.prototype._afterClosed;\n/** @type {?} */\nSxNgxFabricDialogRef.prototype.componentInstance;\n/** @type {?} */\nSxNgxFabricDialogRef.prototype.overlayRef;\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const /** @type {?} */ SX_NGX_FABRIC_DIALOG_DATA = new InjectionToken<any>('SX_NGX_FABRIC_DIALOG_DATA');\n","import { Injectable, Injector, ComponentRef, TemplateRef } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { Component } from '@angular/compiler/src/core';\nimport { SxNgxFabricDialogRef } from './dialog-ref';\nimport { OverlayConfig } from '@angular/cdk/overlay';\nimport { PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { SX_NGX_FABRIC_DIALOG_DATA } from './dialog-tokens';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { SxNgxDialogContainerComponent } from './dialog-container.component';\nimport { SxNgxFabricDialogConfig } from './dialog-config';\n\n\n\nconst /** @type {?} */ DEFAULT_CONFIG: SxNgxFabricDialogConfig = {\n  hasBackdrop: true,\n  backdropClass: 'ms-Overlay--dark',\n  panelClass: 'tm-file-preview-dialog-panel',\n  minWidth: '250px',\n  maxWidth: '80vw',\n  minHeight: '100px',\n  maxHeight: '80vh'\n}\nexport class SxNgxFabricDialogService {\n/**\n * @param {?} injector\n * @param {?} overlay\n */\nconstructor(\nprivate injector: Injector,\nprivate overlay: Overlay) { }\n/**\n * @template T\n * @param {?} component\n * @param {?=} config\n * @return {?}\n */\nopen<T>(component: ComponentType<T>, config: SxNgxFabricDialogConfig = {}): SxNgxFabricDialogRef<T> {\n    // Override default configuration\n    const /** @type {?} */ dialogConfig = { ...DEFAULT_CONFIG, ...config };\n\n    // Returns an OverlayRef which is a PortalHost\n    const /** @type {?} */ overlayRef = this.createOverlay(dialogConfig);\n\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n    // Instantiate remote control\n    const /** @type {?} */ dialogRef = this._attachDialogContent(component, dialogContainer, overlayRef, config);\n\n    overlayRef.backdropClick().subscribe(_ => dialogRef.close());\n\n    return dialogRef;\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate createOverlay(config: SxNgxFabricDialogConfig) {\n    const /** @type {?} */ overlayConfig = this.getOverlayConfig(config);\n    return this.overlay.create(overlayConfig);\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate getOverlayConfig(config: SxNgxFabricDialogConfig): OverlayConfig {\n    const /** @type {?} */ positionStrategy = this.overlay.position()\n      .global()\n      .centerHorizontally()\n      .centerVertically();\n\n    const /** @type {?} */ overlayConfig = new OverlayConfig({\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n      panelClass: config.panelClass,\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy: positionStrategy,\n      minWidth: config.minWidth,\n      maxWidth: config.maxWidth,\n      minHeight: config.minHeight,\n      maxHeight: config.maxHeight\n    });\n\n    return overlayConfig;\n  }\n/**\n * @template T\n * @param {?} component\n * @param {?} overlayRef\n * @param {?} config\n * @param {?} dialogRef\n * @return {?}\n */\nprivate attachDialogContainer<T>(component: ComponentType<T>, overlayRef: OverlayRef, config: SxNgxFabricDialogConfig, dialogRef: SxNgxFabricDialogRef<T>) {\n    const /** @type {?} */ injector = this.createInjector(config, dialogRef);\n\n    const /** @type {?} */ containerPortal = new ComponentPortal(component, null, injector);\n    const /** @type {?} */ containerRef: ComponentRef<T> = overlayRef.attach(containerPortal);\n\n    return containerRef.instance;\n  }\n/**\n * @param {?} overlay\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: SxNgxFabricDialogConfig): SxNgxDialogContainerComponent {\n    const /** @type {?} */ containerPortal = new ComponentPortal(SxNgxDialogContainerComponent, null);\n    const /** @type {?} */ containerRef: ComponentRef<SxNgxDialogContainerComponent> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?} dialogContainer\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContent<T>(\n    componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n    dialogContainer: SxNgxDialogContainerComponent,\n    overlayRef: OverlayRef,\n    config: SxNgxFabricDialogConfig): SxNgxFabricDialogRef<T> {\n\n  // Create a reference to the dialog we're creating in order to give the user a handle\n  // to modify and close it.\n  const /** @type {?} */ dialogRef = new SxNgxFabricDialogRef<T>(overlayRef);\n\n  // When the dialog backdrop is clicked, we want to close it.\n  if (config.hasBackdrop) {\n    overlayRef.backdropClick().subscribe(() => {\n      // if (!dialogRef.disableClose) {\n        dialogRef.close();\n      // }\n    });\n  }\n\n  // Close when escape keydown event occurs\n  // overlayRef.keydownEvents().pipe(\n  //   filter(event => event.keyCode === ESCAPE && !dialogRef.disableClose)\n  // ).subscribe(() => dialogRef.close());\n\n  if (componentOrTemplateRef instanceof TemplateRef) {\n    dialogContainer.attachTemplatePortal(\n      new TemplatePortal<T>(componentOrTemplateRef, null, /** @type {?} */((\n        <any>{ $implicit: config.data, dialogRef }))));\n  } else {\n    const /** @type {?} */ injector = this.createInjector<T>(config, dialogRef);\n    const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal<T>(\n        new ComponentPortal( /** @type {?} */((<any>componentOrTemplateRef)), undefined, injector));\n    dialogRef.componentInstance = contentRef.instance;\n  }\n\n  // dialogRef\n  //   .updateSize(config.width, config.height)\n  //   .updatePosition(config.position);\n\n  return dialogRef;\n}\n/**\n * @template T\n * @param {?} config\n * @param {?} dialogRef\n * @return {?}\n */\nprivate createInjector<T>(config: SxNgxFabricDialogConfig, dialogRef: SxNgxFabricDialogRef<T>): PortalInjector {\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(SxNgxFabricDialogRef, dialogRef);\n    injectionTokens.set(SX_NGX_FABRIC_DIALOG_DATA, config.data);\n\n    return new PortalInjector(this.injector, injectionTokens);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: Overlay, },\n];\n}\n\nfunction SxNgxFabricDialogService_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogService.ctorParameters;\n/** @type {?} */\nSxNgxFabricDialogService.prototype.injector;\n/** @type {?} */\nSxNgxFabricDialogService.prototype.overlay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { SxNgxDialogContainerComponent } from './dialog-container.component';\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport { SxNgxFabricDialogRef } from './dialog-ref';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class SxNgxFabricDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   dialogClose: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: SxNgxFabricDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._sxNgxFabricDialogClose || changes._sxNgxFabricDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[sx-ngx-fabric-dialog-close], button[sxNgxFabricDialogClose]`,\n  exportAs: 'sxNgxFabricDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SxNgxFabricDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['sx-ngx-fabric-dialog-close', ] },],\n'dialogClose': [{ type: Input, args: ['sxNgxFabricDialogClose', ] },],\n};\n}\n\nfunction SxNgxFabricDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogClose.ctorParameters;\n/** @type {?} */\nSxNgxFabricDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nSxNgxFabricDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nSxNgxFabricDialogClose.prototype.dialogResult;\n/** @type {?} */\nSxNgxFabricDialogClose.prototype.dialogClose;\n/** @type {?} */\nSxNgxFabricDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class SxNgxFabricDialogTitle {\n   id = `sx-ngx-fabric-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: SxNgxDialogContainerComponent) { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sx-ngx-fabric-dialog-title], [sxNgxFabricDialogTitle]',\n  exportAs: 'sxNgxFabricDialogTitle',\n  host: {\n    'class': 'ms-Dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SxNgxDialogContainerComponent, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction SxNgxFabricDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogTitle.ctorParameters;\n/** @type {?} */\nSxNgxFabricDialogTitle.propDecorators;\n/** @type {?} */\nSxNgxFabricDialogTitle.prototype.id;\n/** @type {?} */\nSxNgxFabricDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class SxNgxFabricDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[sx-ngx-fabric-dialog-content], sx-ngx-fabric-dialog-content, [sxNgxFabricDialogContent]`,\n  host: {'class': 'ms-Dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SxNgxFabricDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class SxNgxFabricDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[sx-ngx-fabric-dialog-actions], sx-ngx-fabric-dialog-actions, [sxNgxFabricDialogActions]`,\n  host: {'class': 'ms-Dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SxNgxFabricDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { PortalModule } from '@angular/cdk/portal';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SxNgxDialogContainerComponent } from './dialog-container.component';\nimport { SxNgxFabricDialogService } from './dialog.service';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { SxNgxFabricDialogActions, SxNgxFabricDialogClose, SxNgxFabricDialogTitle, SxNgxFabricDialogContent } from './dialog-content.directive';\nexport class DialogModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DialogModule,\n      providers: [SxNgxFabricDialogService]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule\n  ],\n  declarations: [\n    SxNgxDialogContainerComponent,\n    SxNgxFabricDialogClose,\n    SxNgxFabricDialogTitle,\n    SxNgxFabricDialogContent,\n    SxNgxFabricDialogActions\n  ],\n  entryComponents: [\n    SxNgxDialogContainerComponent\n  ],\n  exports: [\n    SxNgxFabricDialogClose,\n    SxNgxFabricDialogTitle,\n    SxNgxFabricDialogContent,\n    SxNgxFabricDialogActions\n  ],\n  providers: [\n    SxNgxFabricDialogService\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, ViewChild, TemplateRef, Output, EventEmitter, Input, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { VerticalConnectionPos, HorizontalConnectionPos } from '@angular/cdk/overlay';\nexport class CalloutComponent {\n\n   xPosition: string;\n\n   yPosition: string;\n\n   templateRef: TemplateRef<any>;\n\n   beak: ElementRef;\n\n   closed = new EventEmitter<void | 'click' | 'keydown'>();\nprivate _beakPosition;\n/**\n * @return {?}\n */\nget beakPosition() { return this._beakPosition; }\n/**\n * @param {?} val\n * @return {?}\n */\nset beakPosition(val) {\n    this._beakPosition = val;\n    this.updateBeakPosition();\n  }\n/**\n * @param {?} elementRef\n */\nconstructor(\nprivate elementRef: ElementRef,\n  ) { }\n/**\n * @return {?}\n */\nupdateBeakPosition() {\n    if (this.beakPosition) {\n      this.beak.nativeElement.style.top = this.beakPosition.top;\n      this.beak.nativeElement.style.left = this.beakPosition.left;\n      this.beak.nativeElement.style.right = this.beakPosition.right;\n      this.beak.nativeElement.style.bottom = this.beakPosition.bottom;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-callout',\n  template: `\n    <ng-template>\n      <div class=\"ms-ContextualHost is-positioned ms-ContextualHost--arrowLeft\">\n        <div class=\"ms-ContextualHost-main\">\n          <div class=\"ms-Callout\">\n            <div class=\"ms-Callout-main\">\n              <div class=\"ms-Callout-header\">\n                <p class=\"ms-Callout-title\">\n                  <ng-content select=\"[sxNgxFabricCalloutHeader]\"></ng-content>\n                </p>\n              </div>\n              <div class=\"ms-Callout-inner\">\n                <div class=\"ms-Callout-content\">\n                  <p class=\"ms-Callout-subText\">\n                    <ng-content select=\"[sxNgxFabricCalloutContent]\"></ng-content>\n                  </p>\n                </div>\n                <div class=\"ms-Callout-actions\">\n                  <ng-content select=\"[sxNgxFabricCalloutActions]\"></ng-content>\n                </div>\n              </div>\n              <ng-content></ng-content>\n            </div>\n          </div>\n        </div>\n        <div #beak class=\"ms-ContextualHost-beak\"></div>\n      </div>\n    </ng-template>\n  `,\n  styles: [`\n    .ms-ContextualHost {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      z-index: 10;\n      margin: 16px auto;\n      position: relative;\n      min-width: 10px;\n      background-color: #fff;\n      -webkit-box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.4);\n              box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.4); }\n\n    .ms-ContextualHost-main {\n      position: relative;\n      background-color: #fff;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      outline: 1px solid transparent;\n      z-index: 5;\n      min-height: 10px; }\n\n    .ms-Callout {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      width: 288px; }\n\n    .ms-Callout-header {\n      z-index: 105;\n      padding: 24px 28px 12px; }\n\n    .ms-Callout-title {\n      margin: 0;\n      font-weight: 300;\n      font-size: 21px; }\n\n    .ms-Callout-inner {\n      height: 100%;\n      padding: 0 28px 12px; }\n\n    .ms-Callout-subText {\n      margin: 0;\n      font-weight: 300;\n      color: #333;\n      font-size: 12px; }\n\n    .ms-Callout-actions {\n      position: relative;\n      margin-top: 20px;\n      width: 100%;\n      white-space: nowrap; }\n\n    .ms-ContextualHost-beak {\n      -webkit-box-shadow: 0 0 15px -5px #3c3c3c;\n              box-shadow: 0 0 15px -5px #3c3c3c;\n      position: absolute;\n      width: 28px;\n      height: 28px;\n      background: #fff;\n      border: 1px solid #eaeaea;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-transform: rotate(45deg);\n      transform: rotate(45deg);\n      z-index: 0;\n      outline: 1px solid transparent; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'beak': [{ type: ViewChild, args: ['beak', ] },],\n'closed': [{ type: Output },],\n};\n}\n\nfunction CalloutComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCalloutComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCalloutComponent.ctorParameters;\n/** @type {?} */\nCalloutComponent.propDecorators;\n/** @type {?} */\nCalloutComponent.prototype.xPosition;\n/** @type {?} */\nCalloutComponent.prototype.yPosition;\n/** @type {?} */\nCalloutComponent.prototype.templateRef;\n/** @type {?} */\nCalloutComponent.prototype.beak;\n/** @type {?} */\nCalloutComponent.prototype.closed;\n/** @type {?} */\nCalloutComponent.prototype._beakPosition;\n/** @type {?} */\nCalloutComponent.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n","import { OverlayRef, Overlay, OverlayConfig, ConnectedPositionStrategy, HorizontalConnectionPos, VerticalConnectionPos } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, Input, ElementRef, ViewContainerRef, Optional } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { CalloutComponent } from './callout.component';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { OnDestroy } from '@angular/core/src/metadata/lifecycle_hooks';\nexport class CalloutTriggerDirective implements OnDestroy {\n/**\n * @return {?}\n */\nget sxNgxFabricCalloutTrigger(): CalloutComponent {\n    return this.callout;\n  }\n/**\n * @param {?} val\n * @return {?}\n */\nset sxNgxFabricCalloutTrigger(val: CalloutComponent) {\n    this.callout = val;\n  }\nprivate _portal: TemplatePortal<any>;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _calloutOpen = false;\nprivate _closeSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\n\n  callout: CalloutComponent;\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef\n  ) { }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n/**\n * @return {?}\n */\nopenCallout(): void {\n    if (!this._calloutOpen) {\n      this._createOverlay().attach(this._portal);\n      setTimeout(() => {\n        this.callout.updateBeakPosition();\n      })\n    }\n  }\n/**\n * @return {?}\n */\ncloseMenu(): void {\n    this.callout.closed.emit();\n  }\n/**\n * @return {?}\n */\n_handleClick() {\n    this.openCallout();\n  }\n/**\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.callout.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._overlayRef = this._overlay.create(config);\n      this._closeSubscription = this._overlayRef.backdropClick().subscribe(_ => {\n        this._overlayRef.detach()\n      });\n    }\n\n    return this._overlayRef;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    const /** @type {?} */ position = this._getPosition();\n    this._subscribeToPositions(position);\n    return new OverlayConfig({\n      hasBackdrop: true,\n      positionStrategy: position,\n      scrollStrategy: this._overlay.scrollStrategies.reposition()\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getPosition(): ConnectedPositionStrategy {\n    const [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.callout.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    const [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.callout.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    const [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    const /** @type {?} */ offsetY = 0;\n\n    originY = overlayY === 'top' ? 'bottom' : 'top';\n    originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n  }\n/**\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy) {\n    this._positionSubscription = position.onPositionChange\n    .pipe(\n      distinctUntilChanged(null, x => x.connectionPair)\n    )\n    .subscribe(pos => {\n      const /** @type {?} */ isCalloutUnderTrigger = pos.connectionPair.overlayY === 'top';\n      const /** @type {?} */ isCalloutLeftAlignedToTrigger = pos.connectionPair.overlayX === 'start';\n      const /** @type {?} */ triggerMiddle = this._portal.viewContainerRef.element.nativeElement.offsetWidth / 2 - 14;\n\n      this.callout.beakPosition = {\n        top: isCalloutUnderTrigger ? '-6px' : null,\n        bottom: !isCalloutUnderTrigger ? '-6px' : null,\n        left: isCalloutLeftAlignedToTrigger ? triggerMiddle + 'px' : null,\n        right: !isCalloutLeftAlignedToTrigger ? triggerMiddle + 'px' : null\n      }\n    })\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sxNgxFabricCalloutTrigger]',\n  host: {\n    'aria-haspopup': 'true',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'sxNgxFabricCalloutTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'sxNgxFabricCalloutTrigger': [{ type: Input },],\n};\n}\n\nfunction CalloutTriggerDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCalloutTriggerDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCalloutTriggerDirective.ctorParameters;\n/** @type {?} */\nCalloutTriggerDirective.propDecorators;\n/** @type {?} */\nCalloutTriggerDirective.prototype._portal;\n/** @type {?} */\nCalloutTriggerDirective.prototype._overlayRef;\n/** @type {?} */\nCalloutTriggerDirective.prototype._calloutOpen;\n/** @type {?} */\nCalloutTriggerDirective.prototype._closeSubscription;\n/** @type {?} */\nCalloutTriggerDirective.prototype._positionSubscription;\n/** @type {?} */\nCalloutTriggerDirective.prototype.callout;\n/** @type {?} */\nCalloutTriggerDirective.prototype._overlay;\n/** @type {?} */\nCalloutTriggerDirective.prototype._element;\n/** @type {?} */\nCalloutTriggerDirective.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CalloutComponent } from './callout.component';\nimport { CalloutTriggerDirective } from './callout-trigger.directive';\nexport class CalloutModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CalloutComponent,\n    CalloutTriggerDirective\n  ],\n  exports: [\n    CalloutComponent,\n    CalloutTriggerDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CalloutModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCalloutModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCalloutModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NavModule } from './nav/nav.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { ToggleModule } from './toggle/toggle.module';\nimport { TextFieldModule } from './text-field/text-field.module';\nimport { ButtonModule } from './button/button.module';\nimport { CheckboxModule } from './checkbox/checkbox.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { DialogModule } from './dialog/dialog.module';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CalloutModule } from './callout/callout.module';\nexport class SxNgxFabricModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    CheckboxModule,\n    ButtonModule,\n    TextFieldModule,\n    DialogModule.forRoot(),\n    ToggleModule,\n    BreadcrumbModule,\n    CalloutModule,\n    NavModule\n  ],\n  exports: [\n    CheckboxModule,\n    ButtonModule,\n    TextFieldModule,\n    DialogModule,\n    ToggleModule,\n    BreadcrumbModule,\n    CalloutModule,\n    NavModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SxNgxFabricModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["tryCatcher","tryCatchTarget","apply","this","arguments","e","errorObject_1","errorObject","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError_1","UnsubscriptionError","pipeFromArray","fns","length","input","prev","fn","noop_1","noop","dispatchBufferTimeSpanOnly","state","subscriber","prevContext","context","closeContext","closed","openContext","closeAction","schedule","bufferTimeSpan","dispatchBufferCreation","bufferCreationInterval","scheduler","add","dispatchBufferClose","arg","dispatchNext","value","next","complete","dispatchError","error","toLength","o","len","isNaN","root_1","root","isFinite","numberIsFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","dispatchNext$1","debouncedNext","minimalSetImpl","MinimalSet","_values","prototype","has","push","indexOf","Object","defineProperty","get","clear","dispatchNotification","period","notifyNext","dispatchNext$2","clearThrottle","dispatchWindowTimeSpanOnly","windowTimeSpan","window","closeWindow","openWindow","dispatchWindowCreation","windowCreationInterval","action","subscription","timeSpanState","dispatchWindowClose","remove","NavComponent","ngOnInit","decorators","type","Component","args","selector","template","styles","ctorParameters","NavModule","NgModule","imports","CommonModule","declarations","exports","BreadcrumbComponent","itemClick","EventEmitter","onClick","item","propDecorators","items","Input","Output","BreadcrumbModule","Guid","uniqueid","idstr","String","fromCharCode","random","ascicode","ToggleComponent","changeDetectorRef","_checked","disabled","offText","onText","textLeft","inputId","_onChange","_","_onTouched","set","checked","markForCheck","onInputClick","evt","stopPropagation","toggle","setDisabledState","isDisabled","writeValue","val","registerOnChange","registerOnTouched","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","class","ChangeDetectorRef","classIsDisabled","HostBinding","classTextLeft","ToggleModule","TextFieldComponent","multiline","rows","required","classes","onChange","target","onTouched","label","placeholder","classMultiline","TextFieldModule","ButtonComponent","primary","classPrimary","ButtonModule","CheckboxComponent","CheckboxModule","SxNgxDialogContainerComponent","_super","_elementRef","_changeDetectorRef","_document","_this","call","__extends","attachComponentPortal","portal","_portalOutlet","attachTemplatePortal","Error","BasePortalOutlet","ElementRef","undefined","Optional","Inject","DOCUMENT","ViewChild","SxNgxFabricDialogRef","overlayRef","_beforeClose","Subject","_afterClosed","close","dispose","componentInstance","afterClosed","asObservable","beforeClose","SX_NGX_FABRIC_DIALOG_DATA","InjectionToken","DEFAULT_CONFIG","hasBackdrop","backdropClass","panelClass","minWidth","maxWidth","minHeight","maxHeight","SxNgxFabricDialogService","injector","overlay","open","component","config","dialogConfig","assign","createOverlay","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","backdropClick","subscribe","overlayConfig","getOverlayConfig","create","positionStrategy","position","global","centerHorizontally","centerVertically","OverlayConfig","scrollStrategy","scrollStrategies","block","attachDialogContainer","createInjector","containerPortal","ComponentPortal","attach","instance","containerRef","_config","componentOrTemplateRef","TemplateRef","TemplatePortal","$implicit","data","contentRef","injectionTokens","WeakMap","PortalInjector","Injectable","Injector","Overlay","dialogElementUid","SxNgxFabricDialogClose","ariaLabel","ngOnChanges","changes","proxiedChange","_sxNgxFabricDialogClose","_sxNgxFabricDialogCloseResult","dialogResult","currentValue","Directive","exportAs","(click)","[attr.aria-label]","dialogClose","SxNgxFabricDialogTitle","_container","id","[id]","SxNgxFabricDialogContent","SxNgxFabricDialogActions","DialogModule","forRoot","ngModule","OverlayModule","PortalModule","entryComponents","CalloutComponent","elementRef","_beakPosition","updateBeakPosition","beakPosition","beak","nativeElement","style","top","left","right","bottom","xPosition","yPosition","templateRef","x","Array","isArray","map","i","toString","join","name","stack","message","Subscription$$1","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","Subscription","hasErrors","index","isFunction_1","isFunction","trial","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","isObject","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","__window","__self","self","WorkerGlobalScope","_root","Symbol","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","OuterSubscriber","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","Subscriber_1","then","nextOrObserver","getSymbolObservable","$$observable","observable","_i","Observable","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","Observable_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","done","obs","TypeError","msg","AuditSubscriber","durationSelector","hasValue","throttled","duration","innerSubscription","subscribeToResult_1","subscribeToResult","OuterSubscriber_1","Action","work","delay","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler","active","scheduled","shift","Scheduler_1","AsyncScheduler_1","AsyncAction_1","parseFloat","TimerObservable","dueTime","isNumeric_1","isNumeric","Number","isScheduler_1","isScheduler","async_1","async","isDate_1","isDate","initialDelay","dispatch","BufferSubscriber","closingNotifier","buffer","BufferCountSubscriber","bufferSize","BufferSkipCountSubscriber","startBufferEvery","buffers","count","Context","BufferTimeSubscriber","maxBufferSize","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","caught","err2","ScalarObservable","EmptyObservable","ArrayObservable","array","of","pop","ScalarObservable_1","EmptyObservable_1","none","CombineLatestSubscriber","project","values","observables","toRespond","unused","oldVal","_tryProject","slice","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","obj","StringIterator","ArrayIterator","getIterator","hasError","return","str","idx","charAt","arr","pow","ArrayLikeObservable","arrayLike","Notification","kind","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","ArrayObservable_1","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","MergeMapSubscriber","resultSelector","concurrent","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","_notifyResultSelector","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","DefaultIfEmptySubscriber","defaultValue","isEmpty","DelayMessage","DelaySubscriber","queue","time","delay_1","max","_schedule","scheduleNotification","SubscriptionDelaySubscriber","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","DistinctSubscriber","keySelector","flushes","_useKeySelector","_finalizeNext","distinctUntilChanged_2","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","ArgumentOutOfRangeError","ElementAtSubscriber","ArgumentOutOfRangeError_1","EverySubscriber","thisArg","everyValueMatch","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandSubscriber","subscribeToProjection","FilterSubscriber","FinallySubscriber","callback","FindValueSubscriber","yieldIndex","EmptyError","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject$$1","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","Subject_2","MapPolyfill","size","_keys","delete","cb","MapPolyfill_1","FastMap","hasOwnProperty","GroupDurationSubscriber","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","Subject_1","groupedObservable","GroupedObservable","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","IsEmptySubscriber","LastSubscriber","MapSubscriber","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","seed","TakeLastSubscriber","total","ring","MergeMapToSubscriber","MergeScanSubscriber","acc","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","refCount_1","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","BehaviorSubject","_value","getValue","AsyncSubject","hasNext","QueueAction","QueueScheduler","QueueAction_1","ReplayEvent","ReplaySubject","windowTime","_events","_bufferSize","_windowTime","_getNow","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","RaceSubscriber","hasFirst","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","compareTo","comparor","_a","_b","_oneComplete","emit","checkValues","a","b","areEqual","nextB","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","isInnerStopped","SkipWhileSubscriber","skipping","tryCallPredicate","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToSubscriber","inner","tryResultSelector","TakeSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","DoSubscriber","safeSubscriber","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeSubscriber","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","TimeoutError","TimeoutSubscriber","absoluteTimeout","waitFor","errorInstance","scheduleTimeout","dispatchTimeout","TimeoutWithSubscriber","withObservable","WindowSubscriber","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","maxWindowSize","numberOfNextedValues","window_2","WindowToggleSubscriber","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","StaticIterator","ZipSubscriber","iterators","StaticArrayIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","distinctUntilChanged","distinctUntilChanged_1","CalloutTriggerDirective","throttle_1","_overlay","_element","_viewContainerRef","_overlayRef","_calloutOpen","_closeSubscription","_positionSubscription","callout","ngOnDestroy","openCallout","_createOverlay","_portal","closeMenu","_handleClick","_getOverlayConfig","detach","_getPosition","_subscribeToPositions","reposition","_d","originX","originFallbackX","_e","overlayY","overlayFallbackY","_f","originY","originFallbackY","_g","overlayX","overlayFallbackX","connectedTo","withOffsetY","withFallbackPosition","onPositionChange","connectionPair","pos","isCalloutUnderTrigger","isCalloutLeftAlignedToTrigger","triggerMiddle","viewContainerRef","offsetWidth","aria-haspopup","ViewContainerRef","sxNgxFabricCalloutTrigger","CalloutModule","SxNgxFabricModule"],"mappings":"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"}
