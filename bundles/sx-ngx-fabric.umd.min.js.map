{"version":3,"file":"sx-ngx-fabric.umd.min.js","sources":["~/sx-ngx-fabric/src/app/sx-ngx-fabric/breadcrumb/breadcrumb.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/breadcrumb/breadcrumb.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/utils/guid.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/toggle/toggle.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/toggle/toggle.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/text-field/text-field.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/text-field/text-field.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/button/button.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/button/button.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/checkbox/checkbox.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/checkbox/checkbox.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-container.component.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-ref.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-tokens.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog.service.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog-content.directive.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/dialog/dialog.module.ts","~/sx-ngx-fabric/src/app/sx-ngx-fabric/sx-ngx-fabric.module.ts"],"sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { IBreadcrumbItem } from './i-breadcrumb-item';\nexport class BreadcrumbComponent {\n\n   items: Array<IBreadcrumbItem>;\n\n   itemClick = new EventEmitter<IBreadcrumbItem>();\nconstructor() { }\n/**\n * @param {?} item\n * @return {?}\n */\nonClick(item: IBreadcrumbItem) {\n    this.itemClick.next(item);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-breadcrumb',\n  template: `\n    <div class=\"ms-Breadcrumb\">\n        <div class=\"ms-Breadcrumb-overflow\">\n          <div class=\"ms-Breadcrumb-overflowButton ms-Icon ms-Icon--ellipsis\" tabindex=\"1\"></div>\n          <i class=\"ms-Breadcrumb-chevron ms-Icon ms-Icon--ChevronRight\"></i>\n          <div class=\"ms-Breadcrumb-overflowMenu\">\n            <ul class=\"ms-ContextualMenu is-open\"></ul>\n          </div>\n        </div>\n        <ul class=\"ms-Breadcrumb-list\">\n          <li class=\"ms-Breadcrumb-listItem\" *ngFor='let item of items'>\n              <a class=\"ms-Breadcrumb-itemLink\" tabindex=\"2\" (click)=\"onClick(item)\" [attr.title]=\"item.text\">{{item.text}}</a>\n              <i class=\"ms-Breadcrumb-chevron ms-Icon ms-Icon--ChevronRight\"></i>\n          </li>\n        </ul>\n      </div>\n  `,\n  styles: [`\n    .ms-Breadcrumb {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      margin: 23px 0 1px; }\n\n    .ms-Breadcrumb-overflow {\n      display: none;\n      position: relative; }\n\n    .ms-Breadcrumb-list {\n      white-space: nowrap;\n      padding: 0;\n      margin: 0;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-align: stretch;\n      -ms-flex-align: stretch;\n      align-items: stretch; }\n\n    .ms-Breadcrumb-list .ms-Breadcrumb-listItem {\n      list-style-type: none;\n      margin: 0;\n      padding: 0;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      position: relative;\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n      align-items: center; }\n\n    .ms-Breadcrumb-itemLink {\n      font-size: 21px;\n      font-weight: 100;\n      color: #333333;\n      padding: 0 8px;\n      max-width: 160px;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      padding-bottom: 3px; }\n\n    .ms-Breadcrumb-itemLink, .ms-Breadcrumb-overflowButton {\n      text-decoration: none;\n      outline: transparent; }\n\n    .ms-Breadcrumb-chevron {\n      font-size: 12px;\n      color: #666666; }\n\n    .ms-Icon--ChevronRight:before {\n      content: '\\\\E76C'; }\n\n    .ms-Breadcrumb-itemLink:hover, .ms-Breadcrumb-overflowButton:hover {\n      background-color: #f8f8f8;\n      cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'items': [{ type: Input },],\n'itemClick': [{ type: Output },],\n};\n}\n\nfunction BreadcrumbComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nBreadcrumbComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBreadcrumbComponent.ctorParameters;\n/** @type {?} */\nBreadcrumbComponent.propDecorators;\n/** @type {?} */\nBreadcrumbComponent.prototype.items;\n/** @type {?} */\nBreadcrumbComponent.prototype.itemClick;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreadcrumbComponent } from './breadcrumb.component';\nexport class BreadcrumbModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    BreadcrumbComponent\n  ],\n  exports: [\n    BreadcrumbComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BreadcrumbModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBreadcrumbModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBreadcrumbModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class Guid {\n/**\n * @return {?}\n */\nstatic uniqueid() {\n        // always start with a letter (for DOM friendlyness)\n        let /** @type {?} */ idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));\n        do {\n            // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n            const /** @type {?} */ ascicode = Math.floor((Math.random() * 42) + 48);\n            if (ascicode < 58 || ascicode > 64) {\n                // exclude all chars between : (58) and @ (64)\n                idstr += String.fromCharCode(ascicode);\n            }\n        } while (idstr.length < 32);\n\n        return (idstr);\n    }\n}","import { Component, OnInit, Input, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy, HostBinding } from '@angular/core';\nimport { Guid } from '../utils/guid';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class ToggleComponent {\nprivate _checked = false;\n/**\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked !== this.checked) {\n      this._checked = checked;\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n   disabled = false;\n\n   offText = 'Off';\n\n   onText = 'On';\n\n   textLeft = false;\n/**\n * @return {?}\n */\nget classIsDisabled() { return this.disabled; }\n/**\n * @return {?}\n */\nget classTextLeft() { return this.textLeft; }\n\n  inputId = Guid.uniqueid();\n/**\n * @param {?} changeDetectorRef\n */\nconstructor(\nprivate changeDetectorRef: ChangeDetectorRef\n  ) { }\n/**\n * @param {?} evt\n * @return {?}\n */\nonInputClick(evt: MouseEvent) {\n    evt.stopPropagation();\n    this.toggle();\n  }\n/**\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.changeDetectorRef.markForCheck();\n  }\nprivate _onChange = (_: any) => { };\nprivate _onTouched = () => { };\n/**\n * @param {?} val\n * @return {?}\n */\npublic writeValue(val: any) {\n    this.checked = val;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => void): void { this._onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => void): void { this._onTouched = fn; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-toggle',\n  template: `\n    <span class=\"ms-Toggle-description\"><ng-content></ng-content></span>\n    <input type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (click)=\"onInputClick($event)\" [disabled]=\"disabled\" class=\"ms-Toggle-input\" />\n    <label [attr.for]=\"inputId\" class=\"ms-Toggle-field\" [class.is-selected]=\"checked\">\n      <span class=\"ms-Label ms-Label--off\">{{ offText }}</span>\n      <span class=\"ms-Label ms-Label--on\">{{ onText }}</span>\n    </label>\n  `,\n  styles: [`\n    :host.ms-Toggle {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      font-weight: 400;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      position: relative;\n      display: block;\n      margin-bottom: 8px; }\n\n    .ms-Toggle-description {\n      color: #333333;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      margin-top: 0px;\n      margin-right: 0px;\n      margin-bottom: 0px;\n      margin-left: 0px;\n      display: block;\n      padding-top: 5px;\n      padding-right: 0px;\n      padding-bottom: 5px;\n      padding-left: 0px;\n      word-wrap: break-word;\n      overflow-wrap: break-word; }\n\n    .ms-Toggle-input {\n      display: none; }\n\n    .ms-Toggle-field {\n      position: relative;\n      display: inline-block;\n      width: 45px;\n      height: 20px;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      border: 1px solid #a6a6a6;\n      border-radius: 20px;\n      cursor: pointer;\n      -webkit-transition: all 0.1s ease;\n      transition: all 0.1s ease;\n      outline: 0; }\n\n    :host.ms-Toggle .ms-Toggle-field:before {\n      position: absolute;\n      top: 4px;\n      width: 10px;\n      height: 10px;\n      border-radius: 10px;\n      content: '';\n      left: 4px;\n      background-color: #333333;\n      outline: 1px solid transparent;\n      -webkit-transition: all 0.1s ease;\n      transition: all 0.1s ease; }\n\n    :host.ms-Toggle .ms-Label {\n      position: relative;\n      padding: 0 0 0 50px; }\n\n    :host.ms-Toggle .ms-Toggle-field .ms-Label {\n      color: #000;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none; }\n\n    :host.ms-Toggle .ms-Toggle-field .ms-Label--off {\n      display: block; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected .ms-Label--off {\n      display: none; }\n\n    :host.ms-Toggle .ms-Toggle-field .ms-Label--on {\n      display: none; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected .ms-Label--on {\n      display: block; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected {\n      background-color: #0078d7;\n      border-color: #0078d7; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected:focus, :host.ms-Toggle .ms-Toggle-field.is-selected:hover {\n      background-color: #106ebe;\n      border-color: #106ebe; }\n\n    :host.ms-Toggle .ms-Toggle-field.is-selected:before {\n      background-color: #fff;\n      left: 28px; }\n\n    :host.ms-Toggle.is-disabled .ms-Toggle-field {\n      background-color: #fff;\n      border-color: #c8c8c8;\n      pointer-events: none;\n      cursor: default; }\n\n    :host.ms-Toggle.is-disabled .ms-Toggle-field.is-selected {\n      background-color: #c8c8c8; }\n\n    :host.ms-Toggle.is-disabled .ms-Toggle-field:before {\n      background-color: #fff; }\n\n    :host.ms-Toggle.is-disabled .ms-Label {\n      color: #a6a6a6; }\n\n    :host.ms-Toggle.ms-Toggle--textLeft {\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex; }\n\n    :host.ms-Toggle.ms-Toggle--textLeft .ms-Toggle-field {\n      margin-right: 24px; }\n\n    :host.ms-Toggle.ms-Toggle--textLeft .ms-Toggle-description {\n      -webkit-box-flex: 1;\n          -ms-flex: auto;\n              flex: auto; }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleComponent),\n    multi: true\n  }],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'ms-Toggle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'checked': [{ type: Input },],\n'disabled': [{ type: Input },],\n'offText': [{ type: Input },],\n'onText': [{ type: Input },],\n'textLeft': [{ type: Input },],\n'classIsDisabled': [{ type: HostBinding, args: ['class.is-disabled', ] },],\n'classTextLeft': [{ type: HostBinding, args: ['class.ms-Toggle--textLeft', ] },],\n};\n}\n\nfunction ToggleComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nToggleComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToggleComponent.ctorParameters;\n/** @type {?} */\nToggleComponent.propDecorators;\n/** @type {?} */\nToggleComponent.prototype._checked;\n/** @type {?} */\nToggleComponent.prototype.disabled;\n/** @type {?} */\nToggleComponent.prototype.offText;\n/** @type {?} */\nToggleComponent.prototype.onText;\n/** @type {?} */\nToggleComponent.prototype.textLeft;\n/** @type {?} */\nToggleComponent.prototype.inputId;\n/** @type {?} */\nToggleComponent.prototype._onChange;\n/** @type {?} */\nToggleComponent.prototype._onTouched;\n/** @type {?} */\nToggleComponent.prototype.changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToggleComponent } from './toggle.component';\nexport class ToggleModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ToggleComponent\n  ],\n  exports: [\n    ToggleComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, HostBinding, Input, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef, Optional } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\nexport class TextFieldComponent {\n\n   label;\n\n   multiline = false;\n\n   rows = 3;\n\n   type = 'text';\n\n   placeholder;\n\n   disabled = false;\n\n   required = false;\n\n  value = null;\n\n   classes = 'ms-TextField';\n/**\n * @return {?}\n */\nget classMultiline() { return this.multiline; }\n/**\n * @return {?}\n */\nget classIsDisabled() { return this.disabled; }\n/**\n * @param {?} changeDetectorRef\n */\nconstructor(\nprivate changeDetectorRef: ChangeDetectorRef\n  ) { }\n/**\n * @param {?} evt\n * @return {?}\n */\nonChange(evt) {\n    evt.stopPropagation();\n    this.value = evt.target.value;\n    this._onChange(this.value);\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\nonTouched(evt) {\n    this._onTouched();\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.changeDetectorRef.markForCheck();\n  }\nprivate _onChange = (_: any) => { };\nprivate _onTouched = () => { };\n/**\n * @param {?} val\n * @return {?}\n */\npublic writeValue(val: any) {\n    this.value = val;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => void): void { this._onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => void): void { this._onTouched = fn; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-text-field',\n  template: `\n    <label class=\"ms-Label\" [class.is-required]=\"required\">{{label}}</label>\n    <input class=\"ms-TextField-field\"\n      *ngIf=\"!multiline\"\n      [attr.type]=\"type\" \n      [attr.placeholder]=\"placeholder\" \n      [value]=\"value\" \n      [disabled]=\"disabled\" \n      (blur)=\"onTouched($event)\"\n      (change)=\"onChange($event)\" \n      (keyup)=\"onChange($event)\"\n    />\n\n    <textarea class=\"ms-TextField-field\"\n    *ngIf=\"multiline\"\n    [attr.type]=\"type\" \n    [attr.placeholder]=\"placeholder\" \n    [value]=\"value\" \n    [disabled]=\"disabled\"\n    [attr.rows]=\"rows\"\n    (blur)=\"onTouched($event)\"\n    (change)=\"onChange($event)\" \n    (keyup)=\"onChange($event)\"\n    ></textarea>\n  `,\n  styles: [`\n    :host.ms-TextField {\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      color: #333333;\n      font-size: 14px;\n      font-weight: 400;\n      margin-bottom: 8px; }\n\n    .ms-Label {\n      font-size: 14px;\n      font-weight: 600; }\n\n    .ms-TextField-field {\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      border: 1px solid #c8c8c8;\n      border-radius: 0;\n      font-weight: 300;\n      font-size: 14px;\n      color: #333333;\n      height: 32px;\n      padding: 6px 12px 7px;\n      width: 100%;\n      min-width: 180px;\n      outline: 0;\n      text-overflow: ellipsis; }\n\n    :host.ms-TextField.ms-TextField--multiline .ms-TextField-field {\n      color: #333333;\n      font-size: 14px;\n      line-height: 17px;\n      min-height: 60px;\n      min-width: 260px;\n      padding-top: 6px;\n      overflow: auto; }\n\n    :host.ms-TextField.is-disabled .ms-TextField-field {\n      background-color: #f4f4f4;\n      border-color: #f4f4f4;\n      pointer-events: none;\n      cursor: default; }\n\n    .ms-TextField-field:hover {\n      border-color: #333333; }\n\n    .ms-TextField-field:active, .ms-TextField-field:focus {\n      border-color: #0078d7; }\n\n    :host.ms-TextField.ng-invalid.ng-touched .ms-TextField-field {\n      border-color: #a80000; }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TextFieldComponent),\n    multi: true\n  }],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'multiline': [{ type: Input },],\n'rows': [{ type: Input },],\n'type': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'classes': [{ type: HostBinding, args: ['class', ] },],\n'classMultiline': [{ type: HostBinding, args: ['class.ms-TextField--multiline', ] },],\n'classIsDisabled': [{ type: HostBinding, args: ['class.is-disabled', ] },],\n};\n}\n\nfunction TextFieldComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTextFieldComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTextFieldComponent.ctorParameters;\n/** @type {?} */\nTextFieldComponent.propDecorators;\n/** @type {?} */\nTextFieldComponent.prototype.label;\n/** @type {?} */\nTextFieldComponent.prototype.multiline;\n/** @type {?} */\nTextFieldComponent.prototype.rows;\n/** @type {?} */\nTextFieldComponent.prototype.type;\n/** @type {?} */\nTextFieldComponent.prototype.placeholder;\n/** @type {?} */\nTextFieldComponent.prototype.disabled;\n/** @type {?} */\nTextFieldComponent.prototype.required;\n/** @type {?} */\nTextFieldComponent.prototype.value;\n/** @type {?} */\nTextFieldComponent.prototype.classes;\n/** @type {?} */\nTextFieldComponent.prototype._onChange;\n/** @type {?} */\nTextFieldComponent.prototype._onTouched;\n/** @type {?} */\nTextFieldComponent.prototype.changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TextFieldComponent } from './text-field.component';\nexport class TextFieldModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TextFieldComponent\n  ],\n  exports: [\n    TextFieldComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TextFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTextFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTextFieldModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { HostBinding } from '@angular/core';\nexport class ButtonComponent implements OnInit {\n\n   primary = false;\n\n   classes = 'ms-Button';\n/**\n * @return {?}\n */\nget classPrimary() { return this.primary; }\nconstructor() { }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'button[sx-ngx-fabric-button], a[sx-ngx-fabric-button]',\n  styles: [`\n    :host:hover {\n      background-color: #eaeaea;\n      border: 1px solid #eaeaea; }\n\n    :host, :host:active {\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-box-shadow: none;\n              box-shadow: none;\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      -webkit-font-smoothing: antialiased;\n      color: #333;\n      font-size: 14px;\n      font-weight: 400;\n      background-color: #f4f4f4;\n      border: 1px solid #f4f4f4;\n      cursor: pointer;\n      display: inline-block;\n      height: 32px;\n      min-width: 80px;\n      padding: 4px 20px 6px;\n      outline: none;\n      text-align: center; }\n\n    .ms-Button-label {\n      color: #333;\n      font-weight: 600;\n      font-size: 14px; }\n\n    :host.ms-Button--primary:hover {\n      background-color: #005a9e;\n      border-color: #005a9e; }\n\n    :host.ms-Button--primary, :host.ms-Button--primary:active {\n      background-color: #0078d7;\n      border-color: #0078d7; }\n\n    :host.ms-Button--primary .ms-Button-label {\n      color: #fff; }\n\n    :host[disabled], :host[disabled]:hover, :host[disabled]:active {\n      cursor: default;\n      background-color: #f4f4f4;\n      border-color: #f4f4f4; }\n\n    :host[disabled] .ms-Button-label {\n      color: #a6a6a6; }\n  `],\n  template: `\n    <div class=\"ms-Button-label\"><ng-content></ng-content></div>\n  `,\n  // host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'primary': [{ type: Input },],\n'classes': [{ type: HostBinding, args: ['class', ] },],\n'classPrimary': [{ type: HostBinding, args: ['class.ms-Button--primary', ] },],\n};\n}\n\nfunction ButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonComponent.ctorParameters;\n/** @type {?} */\nButtonComponent.propDecorators;\n/** @type {?} */\nButtonComponent.prototype.primary;\n/** @type {?} */\nButtonComponent.prototype.classes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './button.component';\nexport class ButtonModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ButtonComponent\n  ],\n  exports: [\n    ButtonComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Input, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { Guid } from '../utils/guid';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class CheckboxComponent {\nprivate _checked = false;\n/**\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked !== this.checked) {\n      this._checked = checked;\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n   disabled = false;\n\n  inputId = Guid.uniqueid();\n/**\n * @param {?} changeDetectorRef\n */\nconstructor(\nprivate changeDetectorRef: ChangeDetectorRef\n  ) { }\n/**\n * @param {?} evt\n * @return {?}\n */\nonInputClick(evt: MouseEvent) {\n    evt.stopPropagation();\n    this.toggle();\n  }\n/**\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this.changeDetectorRef.markForCheck();\n  }\nprivate _onChange = (_: any) => { };\nprivate _onTouched = () => { };\n/**\n * @param {?} val\n * @return {?}\n */\npublic writeValue(val: any) {\n    this.checked = val;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => void): void { this._onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => void): void { this._onTouched = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-checkbox',\n  template: `\n    <input type=\"checkbox\" [attr.id]=\"inputId\" [checked]=\"checked\" (click)=\"onInputClick($event)\" [disabled]=\"disabled\"/>\n    <label role=\"checkbox\" [attr.for]=\"inputId\" [class.is-checked]=\"checked\" [class.disabled]=\"disabled\">\n      <span class=\"ms-label\"><ng-content></ng-content></span>\n    </label>\n  `,\n  styles: [`\n    :host {\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      color: #333333;\n      font-family: Segoe UI WestEuropean,Segoe UI,-apple-system,BlinkMacSystemFont,Roboto,Helvetica Neue,sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      min-height: 36px;\n      position: relative; }\n\n    input {\n      position: absolute;\n      opacity: 0; }\n\n    label {\n      display: inline-block;\n      cursor: pointer;\n      margin-top: 8px;\n      position: relative;\n      outline: 0;\n      vertical-align: top; }\n\n    label:hover {\n      color: #000000; }\n\n    label:before {\n      content: '';\n      display: inline-block;\n      border: 1px solid #a6a6a6;\n      width: 20px;\n      height: 20px;\n      cursor: pointer;\n      font-weight: 400;\n      position: absolute;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-transition-property: background, border, border-color;\n      transition-property: background, border, border-color;\n      -webkit-transition-duration: 200ms;\n              transition-duration: 200ms;\n      -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.23, 1);\n              transition-timing-function: cubic-bezier(0.4, 0, 0.23, 1); }\n\n    label:hover:before {\n      border: 1px solid #333333; }\n\n    label.disabled {\n      color: #c8c8c8; }\n\n    label.disabled:before, label.disabled:hover:before {\n      border: 1px solid #c8c8c8; }\n\n    label.is-checked:before {\n      border: 10px solid #0078d7;\n      background-color: #0078d7; }\n\n    label.is-checked:hover:before {\n      border: 10px solid #106ebe;\n      background-color: #106ebe; }\n\n    label.disabled.is-checked:before, label.disabled.is-checked:hover:before {\n      border: 10px solid #c8c8c8;\n      background-color: #c8c8c8; }\n\n    label:after {\n      content: '\\\\E73E';\n      font-family: FabricMDL2Icons;\n      display: none;\n      position: absolute;\n      font-weight: 900;\n      background-color: transparent;\n      font-size: 13px;\n      top: 0;\n      color: #fff;\n      line-height: 20px;\n      width: 20px;\n      text-align: center; }\n\n    label.is-checked:after {\n      display: block; }\n\n    .ms-label {\n      font-size: 14px;\n      padding: 0 0 0 26px;\n      cursor: pointer;\n      display: inline-block; }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n  }],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'checked': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction CheckboxComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxComponent.ctorParameters;\n/** @type {?} */\nCheckboxComponent.propDecorators;\n/** @type {?} */\nCheckboxComponent.prototype._checked;\n/** @type {?} */\nCheckboxComponent.prototype.disabled;\n/** @type {?} */\nCheckboxComponent.prototype.inputId;\n/** @type {?} */\nCheckboxComponent.prototype._onChange;\n/** @type {?} */\nCheckboxComponent.prototype._onTouched;\n/** @type {?} */\nCheckboxComponent.prototype.changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CheckboxComponent } from './checkbox.component';\nexport class CheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CheckboxComponent\n  ],\n  exports: [\n    CheckboxComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, ViewEncapsulation, ViewChild, ComponentRef, EmbeddedViewRef, Optional, Inject, ChangeDetectorRef, ElementRef } from '@angular/core';\nimport { CdkPortalOutlet, BasePortalOutlet, TemplatePortal, CdkPortal } from '@angular/cdk/portal';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { SxNgxFabricDialogConfig } from './dialog-config';\nimport { DOCUMENT } from '@angular/platform-browser';\nexport class SxNgxDialogContainerComponent extends BasePortalOutlet {\n/**\n * The portal outlet inside of this container into which the dialog content will be loaded.\n */\n_portalOutlet: CdkPortalOutlet;\n\n  _config: SxNgxFabricDialogConfig;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any\n  ) {\n    super();\n  }\n/**\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    // if (this._portalOutlet.hasAttached()) {\n    //   throw new Error('Has already attached')\n    // }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n/**\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    throw new Error('Method not implemented.');\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sx-ngx-fabric-dialog-container',\n  template: `\n    <ng-template #portalOutlet=\"cdkPortalOutlet\" cdkPortalOutlet ></ng-template>\n  `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalOutlet': [{ type: ViewChild, args: ['portalOutlet', ] },],\n};\n}\n\nfunction SxNgxDialogContainerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxDialogContainerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxDialogContainerComponent.ctorParameters;\n/** @type {?} */\nSxNgxDialogContainerComponent.propDecorators;\n/**\n * The portal outlet inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nSxNgxDialogContainerComponent.prototype._portalOutlet;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._config;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._elementRef;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._changeDetectorRef;\n/** @type {?} */\nSxNgxDialogContainerComponent.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/take';\nexport class SxNgxFabricDialogRef<T> {\nprivate _beforeClose = new Subject<void>();\nprivate _afterClosed = new Subject<void>();\n\n    componentInstance: T;\n/**\n * @param {?} overlayRef\n */\nconstructor(private overlayRef: OverlayRef) { }\n/**\n * @param {?=} value\n * @return {?}\n */\nclose(value?: any): void {\n        this.overlayRef.dispose();\n        this._afterClosed.next(value);\n        this._afterClosed.complete();\n        this.componentInstance = null;\n\n        // this.componentInstance.animationStateChanged\n        //   .filter(event => event.phaseName === 'start')\n        //   .take(1)\n        //   .subscribe(() => {\n        //     this._beforeClose.next();\n        //     this._beforeClose.complete();\n        //     this.overlayRef.detachBackdrop();\n        //   });\n\n        // this.componentInstance.animationStateChanged\n        //   .filter(event => event.phaseName === 'done' && event.toState === 'leave')\n        //   .take(1)\n        //   .subscribe(() => {\n        //     this.overlayRef.dispose();\n        //     this._afterClosed.next();\n        //     this._afterClosed.complete();\n        //     this.componentInstance = null;\n        //   });\n\n        // this.componentInstance.startExitAnimation();\n    }\n/**\n * @return {?}\n */\nafterClosed(): Observable<void> {\n        return this._afterClosed.asObservable();\n    }\n/**\n * @return {?}\n */\nbeforeClose(): Observable<void> {\n        return this._beforeClose.asObservable();\n    }\n}\n\nfunction SxNgxFabricDialogRef_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogRef.prototype._beforeClose;\n/** @type {?} */\nSxNgxFabricDialogRef.prototype._afterClosed;\n/** @type {?} */\nSxNgxFabricDialogRef.prototype.componentInstance;\n/** @type {?} */\nSxNgxFabricDialogRef.prototype.overlayRef;\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const /** @type {?} */ SX_NGX_FABRIC_DIALOG_DATA = new InjectionToken<any>('SX_NGX_FABRIC_DIALOG_DATA');\n","import { Injectable, Injector, ComponentRef, TemplateRef } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { Component } from '@angular/compiler/src/core';\nimport { SxNgxFabricDialogRef } from './dialog-ref';\nimport { OverlayConfig } from '@angular/cdk/overlay';\nimport { PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { SX_NGX_FABRIC_DIALOG_DATA } from './dialog-tokens';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { SxNgxDialogContainerComponent } from './dialog-container.component';\nimport { SxNgxFabricDialogConfig } from './dialog-config';\n\n\n\nconst /** @type {?} */ DEFAULT_CONFIG: SxNgxFabricDialogConfig = {\n  hasBackdrop: true,\n  backdropClass: 'ms-Overlay--dark',\n  panelClass: 'tm-file-preview-dialog-panel',\n  minWidth: '250px',\n  maxWidth: '80vw',\n  minHeight: '100px',\n  maxHeight: '80vh'\n}\nexport class SxNgxFabricDialogService {\n/**\n * @param {?} injector\n * @param {?} overlay\n */\nconstructor(\nprivate injector: Injector,\nprivate overlay: Overlay) { }\n/**\n * @template T\n * @param {?} component\n * @param {?=} config\n * @return {?}\n */\nopen<T>(component: ComponentType<T>, config: SxNgxFabricDialogConfig = {}): SxNgxFabricDialogRef<T> {\n    // Override default configuration\n    const /** @type {?} */ dialogConfig = { ...DEFAULT_CONFIG, ...config };\n\n    // Returns an OverlayRef which is a PortalHost\n    const /** @type {?} */ overlayRef = this.createOverlay(dialogConfig);\n\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n    // Instantiate remote control\n    const /** @type {?} */ dialogRef = this._attachDialogContent(component, dialogContainer, overlayRef, config);\n\n    overlayRef.backdropClick().subscribe(_ => dialogRef.close());\n\n    return dialogRef;\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate createOverlay(config: SxNgxFabricDialogConfig) {\n    const /** @type {?} */ overlayConfig = this.getOverlayConfig(config);\n    return this.overlay.create(overlayConfig);\n  }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate getOverlayConfig(config: SxNgxFabricDialogConfig): OverlayConfig {\n    const /** @type {?} */ positionStrategy = this.overlay.position()\n      .global()\n      .centerHorizontally()\n      .centerVertically();\n\n    const /** @type {?} */ overlayConfig = new OverlayConfig({\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n      panelClass: config.panelClass,\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      positionStrategy: positionStrategy,\n      minWidth: config.minWidth,\n      maxWidth: config.maxWidth,\n      minHeight: config.minHeight,\n      maxHeight: config.maxHeight\n    });\n\n    return overlayConfig;\n  }\n/**\n * @template T\n * @param {?} component\n * @param {?} overlayRef\n * @param {?} config\n * @param {?} dialogRef\n * @return {?}\n */\nprivate attachDialogContainer<T>(component: ComponentType<T>, overlayRef: OverlayRef, config: SxNgxFabricDialogConfig, dialogRef: SxNgxFabricDialogRef<T>) {\n    const /** @type {?} */ injector = this.createInjector(config, dialogRef);\n\n    const /** @type {?} */ containerPortal = new ComponentPortal(component, null, injector);\n    const /** @type {?} */ containerRef: ComponentRef<T> = overlayRef.attach(containerPortal);\n\n    return containerRef.instance;\n  }\n/**\n * @param {?} overlay\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: SxNgxFabricDialogConfig): SxNgxDialogContainerComponent {\n    const /** @type {?} */ containerPortal = new ComponentPortal(SxNgxDialogContainerComponent, null);\n    const /** @type {?} */ containerRef: ComponentRef<SxNgxDialogContainerComponent> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * @template T\n * @param {?} componentOrTemplateRef\n * @param {?} dialogContainer\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachDialogContent<T>(\n    componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n    dialogContainer: SxNgxDialogContainerComponent,\n    overlayRef: OverlayRef,\n    config: SxNgxFabricDialogConfig): SxNgxFabricDialogRef<T> {\n\n  // Create a reference to the dialog we're creating in order to give the user a handle\n  // to modify and close it.\n  const /** @type {?} */ dialogRef = new SxNgxFabricDialogRef<T>(overlayRef);\n\n  // When the dialog backdrop is clicked, we want to close it.\n  if (config.hasBackdrop) {\n    overlayRef.backdropClick().subscribe(() => {\n      // if (!dialogRef.disableClose) {\n        dialogRef.close();\n      // }\n    });\n  }\n\n  // Close when escape keydown event occurs\n  // overlayRef.keydownEvents().pipe(\n  //   filter(event => event.keyCode === ESCAPE && !dialogRef.disableClose)\n  // ).subscribe(() => dialogRef.close());\n\n  if (componentOrTemplateRef instanceof TemplateRef) {\n    dialogContainer.attachTemplatePortal(\n      new TemplatePortal<T>(componentOrTemplateRef, null, /** @type {?} */((\n        <any>{ $implicit: config.data, dialogRef }))));\n  } else {\n    const /** @type {?} */ injector = this.createInjector<T>(config, dialogRef);\n    const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal<T>(\n        new ComponentPortal( /** @type {?} */((<any>componentOrTemplateRef)), undefined, injector));\n    dialogRef.componentInstance = contentRef.instance;\n  }\n\n  // dialogRef\n  //   .updateSize(config.width, config.height)\n  //   .updatePosition(config.position);\n\n  return dialogRef;\n}\n/**\n * @template T\n * @param {?} config\n * @param {?} dialogRef\n * @return {?}\n */\nprivate createInjector<T>(config: SxNgxFabricDialogConfig, dialogRef: SxNgxFabricDialogRef<T>): PortalInjector {\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(SxNgxFabricDialogRef, dialogRef);\n    injectionTokens.set(SX_NGX_FABRIC_DIALOG_DATA, config.data);\n\n    return new PortalInjector(this.injector, injectionTokens);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: Overlay, },\n];\n}\n\nfunction SxNgxFabricDialogService_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogService.ctorParameters;\n/** @type {?} */\nSxNgxFabricDialogService.prototype.injector;\n/** @type {?} */\nSxNgxFabricDialogService.prototype.overlay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { SxNgxDialogContainerComponent } from './dialog-container.component';\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport { SxNgxFabricDialogRef } from './dialog-ref';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class SxNgxFabricDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   dialogClose: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: SxNgxFabricDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._sxNgxFabricDialogClose || changes._sxNgxFabricDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[sx-ngx-fabric-dialog-close], button[sxNgxFabricDialogClose]`,\n  exportAs: 'sxNgxFabricDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SxNgxFabricDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['sx-ngx-fabric-dialog-close', ] },],\n'dialogClose': [{ type: Input, args: ['sxNgxFabricDialogClose', ] },],\n};\n}\n\nfunction SxNgxFabricDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogClose.ctorParameters;\n/** @type {?} */\nSxNgxFabricDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nSxNgxFabricDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nSxNgxFabricDialogClose.prototype.dialogResult;\n/** @type {?} */\nSxNgxFabricDialogClose.prototype.dialogClose;\n/** @type {?} */\nSxNgxFabricDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class SxNgxFabricDialogTitle {\n   id = `sx-ngx-fabric-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: SxNgxDialogContainerComponent) { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[sx-ngx-fabric-dialog-title], [sxNgxFabricDialogTitle]',\n  exportAs: 'sxNgxFabricDialogTitle',\n  host: {\n    'class': 'ms-Dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SxNgxDialogContainerComponent, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction SxNgxFabricDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogTitle.ctorParameters;\n/** @type {?} */\nSxNgxFabricDialogTitle.propDecorators;\n/** @type {?} */\nSxNgxFabricDialogTitle.prototype.id;\n/** @type {?} */\nSxNgxFabricDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class SxNgxFabricDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[sx-ngx-fabric-dialog-content], sx-ngx-fabric-dialog-content, [sxNgxFabricDialogContent]`,\n  host: {'class': 'ms-Dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SxNgxFabricDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class SxNgxFabricDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[sx-ngx-fabric-dialog-actions], sx-ngx-fabric-dialog-actions, [sxNgxFabricDialogActions]`,\n  host: {'class': 'ms-Dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SxNgxFabricDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { PortalModule } from '@angular/cdk/portal';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SxNgxDialogContainerComponent } from './dialog-container.component';\nimport { SxNgxFabricDialogService } from './dialog.service';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { SxNgxFabricDialogActions, SxNgxFabricDialogClose, SxNgxFabricDialogTitle, SxNgxFabricDialogContent } from './dialog-content.directive';\nexport class DialogModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DialogModule,\n      providers: [SxNgxFabricDialogService]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule\n  ],\n  declarations: [\n    SxNgxDialogContainerComponent,\n    SxNgxFabricDialogClose,\n    SxNgxFabricDialogTitle,\n    SxNgxFabricDialogContent,\n    SxNgxFabricDialogActions\n  ],\n  entryComponents: [\n    SxNgxDialogContainerComponent\n  ],\n  exports: [\n    SxNgxFabricDialogClose,\n    SxNgxFabricDialogTitle,\n    SxNgxFabricDialogContent,\n    SxNgxFabricDialogActions\n  ],\n  providers: [\n    SxNgxFabricDialogService\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { ToggleModule } from './toggle/toggle.module';\nimport { TextFieldModule } from './text-field/text-field.module';\nimport { ButtonModule } from './button/button.module';\nimport { CheckboxModule } from './checkbox/checkbox.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { DialogModule } from './dialog/dialog.module';\nimport { PortalModule } from '@angular/cdk/portal';\nexport class SxNgxFabricModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    CheckboxModule,\n    ButtonModule,\n    TextFieldModule,\n    DialogModule.forRoot(),\n    ToggleModule,\n    BreadcrumbModule\n  ],\n  exports: [\n    CheckboxModule,\n    ButtonModule,\n    TextFieldModule,\n    DialogModule,\n    ToggleModule,\n    BreadcrumbModule\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SxNgxFabricModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSxNgxFabricModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSxNgxFabricModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["BreadcrumbComponent","this","itemClick","EventEmitter","prototype","onClick","item","next","decorators","type","Component","args","selector","template","styles","ctorParameters","propDecorators","items","Input","Output","BreadcrumbModule","NgModule","imports","CommonModule","declarations","exports","Guid","uniqueid","idstr","String","fromCharCode","Math","floor","random","ascicode","length","ToggleComponent","changeDetectorRef","_checked","disabled","offText","onText","textLeft","inputId","_onChange","_","_onTouched","Object","defineProperty","get","set","checked","markForCheck","onInputClick","evt","stopPropagation","toggle","setDisabledState","isDisabled","writeValue","val","registerOnChange","fn","registerOnTouched","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","host","class","ChangeDetectorRef","classIsDisabled","HostBinding","classTextLeft","ToggleModule","TextFieldComponent","multiline","rows","required","value","classes","onChange","target","onTouched","label","placeholder","classMultiline","TextFieldModule","ButtonComponent","primary","ngOnInit","classPrimary","ButtonModule","CheckboxComponent","CheckboxModule","SxNgxDialogContainerComponent","_super","_elementRef","_changeDetectorRef","_document","_this","call","__extends","attachComponentPortal","portal","_portalOutlet","attachTemplatePortal","Error","BasePortalOutlet","ElementRef","undefined","Optional","Inject","DOCUMENT","ViewChild","SxNgxFabricDialogRef","overlayRef","_beforeClose","Subject","_afterClosed","close","dispose","complete","componentInstance","afterClosed","asObservable","beforeClose","SX_NGX_FABRIC_DIALOG_DATA","InjectionToken","DEFAULT_CONFIG","hasBackdrop","backdropClass","panelClass","minWidth","maxWidth","minHeight","maxHeight","SxNgxFabricDialogService","injector","overlay","open","component","config","dialogConfig","assign","createOverlay","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","backdropClick","subscribe","overlayConfig","getOverlayConfig","create","positionStrategy","position","global","centerHorizontally","centerVertically","OverlayConfig","scrollStrategy","scrollStrategies","block","attachDialogContainer","createInjector","containerPortal","ComponentPortal","attach","instance","containerRef","_config","componentOrTemplateRef","TemplateRef","TemplatePortal","$implicit","data","contentRef","injectionTokens","WeakMap","PortalInjector","Injectable","Injector","Overlay","dialogElementUid","SxNgxFabricDialogClose","ariaLabel","ngOnChanges","changes","proxiedChange","_sxNgxFabricDialogClose","_sxNgxFabricDialogCloseResult","dialogResult","currentValue","Directive","exportAs","(click)","[attr.aria-label]","dialogClose","SxNgxFabricDialogTitle","_container","id","[id]","SxNgxFabricDialogContent","SxNgxFabricDialogActions","DialogModule","forRoot","ngModule","OverlayModule","PortalModule","entryComponents","SxNgxFabricModule"],"mappings":"mkCAEAA,EAAA,WAKA,SAAAA,IADGC,KAAHC,UAEe,IAAIC,EAAAA,oBAInBH,EAAAI,UAAAC,QAAA,SAAGC,GACCL,KAAKC,UAAUK,KAAKD,MAXxB,GAcON,EAAPQ,aACEC,KAAMC,EAAAA,UAAWC,OACjBC,SAAU,2BACVC,SAAU,8wBAiBVC,QAAQ,4iDA8DTd,EAADe,eAAC,WAAA,UAEMf,EAAPgB,gBAGAC,QAFYR,KAAMS,EAAAA,QAGlBhB,YAFgBO,KAAMU,EAAAA,UCnGtB,IAAAC,EAAA,kBAAA,aAAA,GAEuCA,EAAvCZ,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,cAEFC,cACExB,GAEFyB,SACEzB,OAOHoB,EAADL,eAAC,WAAA,UClBD,IAAAW,EAAA,WAAA,SAAAA,KAkBA,OAlBKA,EAALC,SAIA,WAEQ,IAJIC,EAAQC,OAAOC,aAAaC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,KAKlE,EAJG,CAMC,IAJMC,EAAWH,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,KAK/CC,EAJW,IAAMA,EAAW,MAM5BN,GAJSC,OAAOC,aAAaI,UAEnCN,EAAaO,OAAS,IAMxB,OAAA,GAERT,EAlBA,GCEAU,EAAA,WAuCA,SAAAA,EARYC,GAAApC,KAAZoC,kBAAYA,EA3BFpC,KAAVqC,UAAqB,EAelBrC,KAAHsC,UAHc,EAKXtC,KAAHuC,QAHa,MAKVvC,KAAHwC,OAHY,KAKTxC,KAAHyC,UAHc,EAaZzC,KAAF0C,QAPYjB,EAAKC,WAsBP1B,KAAV2C,UAAsB,SAAAC,KACZ5C,KAAV6C,WAAuB,oBA9CvBC,OAAAC,eAAIZ,EAAJhC,UAAA,WAAA6C,IAAA,WACI,OAAOhD,KAAKqC,UAMhBY,IAAA,SAHGC,GAIKA,IAHYlD,KAAKkD,UAInBlD,KAHKqC,SAAWa,EAIhBlD,KAHKoC,kBAAkBe,iDAiB7BL,OAAAC,eALIZ,EAKJhC,UAAA,mBAAA6C,IAAA,WAL2B,OAAOhD,KAAKsC,0CASvCQ,OAAAC,eAPIZ,EAOJhC,UAAA,iBAAA6C,IAAA,WAPyB,OAAOhD,KAAKyC,0CAoBrCN,EAAAhC,UAAAiD,aAAA,SAZGC,GAaCA,EAZIC,kBAaJtD,KAZKuD,UAiBTpB,EAAAhC,UAAAoD,OAAA,WACIvD,KAdKkD,SAAUlD,KAAMkD,QAerBlD,KAdK2C,UAAU3C,KAAKkD,UAoBxBf,EAAAhC,UAAAqD,iBAAA,SAhBGC,GAiBCzD,KAhBKsC,SAAWmB,EAiBhBzD,KAhBKoC,kBAAkBe,gBAMxBhB,EAAHhC,UAAAuD,WAAG,SAAAC,GAmBC3D,KAlBKkD,QAAUS,GAGhBxB,EAAHhC,UAAAyD,iBAAG,SAAAC,GAAqD7D,KAAK2C,UAAYkB,GACtE1B,EAAHhC,UAAA2D,kBAAG,SAAAD,GAAgD7D,KAAK6C,WAAagB,KA1DrE,GA4DO1B,EAAP5B,aACEC,KAAMC,EAAAA,UAAWC,OA0BjBC,SAzBU,uBA0BVC,SAzBU,2cAiCVC,QAzBQ,sjHAwIRkD,YAiBEC,QAzBSC,EAAAA,kBA0BTC,YAzBaC,EAAAA,WAAW,WAAM,OAAAhC,IA0B9BiC,OAzBO,IA2BTC,qBAzBqB,EA0BrBC,gBAzBiBC,EAAAA,wBAAwBC,OA0BzCC,MACEC,QAzBS,iBAKZvC,EAADrB,eAAC,WAAA,QA4BAN,KAAMmE,EAAAA,qBAzBAxC,EAAPpB,gBA4BAmC,UA3Bc1C,KAAMS,EAAAA,QA4BpBqB,WA3Be9B,KAAMS,EAAAA,QA4BrBsB,UA3Bc/B,KAAMS,EAAAA,QA4BpBuB,SA3BahC,KAAMS,EAAAA,QA4BnBwB,WA3BejC,KAAMS,EAAAA,QA4BrB2D,kBA3BsBpE,KAAMqE,EAAAA,YAAanE,MAAM,uBA4B/CoE,gBA3BoBtE,KAAMqE,EAAAA,YAAanE,MAAM,gCC7N7C,IAAAqE,EAAA,kBAAA,aAAA,GAEmCA,EAAnCxE,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,cAEFC,cACEY,GAEFX,SACEW,OAOH4C,EAADjE,eAAC,WAAA,UCjBD,IAAAkE,EAAA,WA8BA,SAAAA,EADY5C,GAAApC,KAAZoC,kBAAYA,EAzBTpC,KAAHiF,WAEe,EAAZjF,KAAHkF,KAEU,EAAPlF,KAAHQ,KAEU,OAEPR,KAAHsC,UAEc,EAAXtC,KAAHmF,UAEc,EAAZnF,KAAFoF,MAEU,KAAPpF,KAAHqF,QAEa,eA4BHrF,KAAV2C,UAAsB,SAAAC,KACZ5C,KAAV6C,WAAuB,oBA3BvBC,OAAAC,eAAIiC,EAAJ7E,UAAA,kBAAA6C,IAAA,WAA0B,OAAOhD,KAAKiF,2CAItCnC,OAAAC,eAFIiC,EAEJ7E,UAAA,mBAAA6C,IAAA,WAF2B,OAAOhD,KAAKsC,0CAavC0C,EAAA7E,UAAAmF,SAAA,SALGjC,GAMCA,EALIC,kBAMJtD,KALKoF,MAAQ/B,EAAIkC,OAAOH,MAMxBpF,KALK2C,UAAU3C,KAAKoF,QAWxBJ,EAAA7E,UAAAqF,UAAA,SARGnC,GASCrD,KARK6C,cAcTmC,EAAA7E,UAAAqD,iBAAA,SAVGC,GAWCzD,KAVKsC,SAAWmB,EAWhBzD,KAVKoC,kBAAkBe,gBAMxB6B,EAAH7E,UAAAuD,WAAG,SAAAC,GAaC3D,KAZKoF,MAAQzB,GAGdqB,EAAH7E,UAAAyD,iBAAG,SAAAC,GAAqD7D,KAAK2C,UAAYkB,GACtEmB,EAAH7E,UAAA2D,kBAAG,SAAAD,GAAgD7D,KAAK6C,WAAagB,KAxDrE,GA0DOmB,EAAPzE,aACEC,KAAMC,EAAAA,UAAWC,OAoBjBC,SAnBU,2BAoBVC,SAnBU,gsBA4CVC,QAnBQ,8rDAiFRkD,YACEC,QAnBSC,EAAAA,kBAoBTC,YAnBaC,EAAAA,WAAW,WAAM,OAAAa,IAoB9BZ,OAnBO,IAqBTC,qBAnBqB,EACrBC,gBAAiBC,EAAAA,wBAAwBC,WAI1CQ,EAADlE,eAAC,WAAA,QAsBAN,KAAMmE,EAAAA,qBAnBAK,EAAPjE,gBAsBA0E,QArBYjF,KAAMS,EAAAA,QAsBlBgE,YArBgBzE,KAAMS,EAAAA,QAsBtBiE,OArBW1E,KAAMS,EAAAA,QAsBjBT,OArBWA,KAAMS,EAAAA,QAsBjByE,cArBkBlF,KAAMS,EAAAA,QAsBxBqB,WArBe9B,KAAMS,EAAAA,QAsBrBkE,WArBe3E,KAAMS,EAAAA,QAsBrBoE,UArBc7E,KAAMqE,EAAAA,YAAanE,MAAM,WAsBvCiF,iBArBqBnF,KAAMqE,EAAAA,YAAanE,MAAM,mCAsB9CkE,kBArBsBpE,KAAMqE,EAAAA,YAAanE,MAAM,wBC1K/C,IAAAkF,EAAA,kBAAA,aAAA,GAEsCA,EAAtCrF,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,cAEFC,cACEyD,GAEFxD,SACEwD,OAOHY,EAAD9E,eAAC,WAAA,UCjBD,IAAA+E,EAAA,WASA,SAAAA,IAPG7F,KAAH8F,SAEa,EAAV9F,KAAHqF,QAEa,mBAEbvC,OAAAC,eAAI8C,EAAJ1F,UAAA,gBAAA6C,IAAA,WAAwB,OAAOhD,KAAK8F,yCAKpCD,EAAA1F,UAAA4F,SAAA,eAbA,GAeOF,EAAPtF,aACEC,KAAMC,EAAAA,UAAWC,OAEjBC,SADU,wDAEVE,QADQ,22CAkDRD,SADU,6EAOXiF,EAAD/E,eAAC,WAAA,UAEM+E,EAAP9E,gBAIA+E,UAHctF,KAAMS,EAAAA,QAIpBoE,UAHc7E,KAAMqE,EAAAA,YAAanE,MAAM,WAIvCsF,eAHmBxF,KAAMqE,EAAAA,YAAanE,MAAM,+BC9E5C,IAAAuF,EAAA,kBAAA,aAAA,GAEmCA,EAAnC1F,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,cAEFC,cACEsE,GAEFrE,SACEqE,OAOHI,EAADnF,eAAC,WAAA,UCfD,IAAAoF,EAAA,WAyBA,SAAAA,EAJY9D,GAAApC,KAAZoC,kBAAYA,EAjBFpC,KAAVqC,UAAqB,EAelBrC,KAAHsC,UAHc,EAKZtC,KAAF0C,QAHYjB,EAAKC,WAsBP1B,KAAV2C,UAAsB,SAAAC,KACZ5C,KAAV6C,WAAuB,oBApCvBC,OAAAC,eAAImD,EAAJ/F,UAAA,WAAA6C,IAAA,WACI,OAAOhD,KAAKqC,UAMhBY,IAAA,SAHGC,GAIKA,IAHYlD,KAAKkD,UAInBlD,KAHKqC,SAAWa,EAIhBlD,KAHKoC,kBAAkBe,iDAoB7B+C,EAAA/F,UAAAiD,aAAA,SARGC,GASCA,EARIC,kBASJtD,KARKuD,UAaT2C,EAAA/F,UAAAoD,OAAA,WACIvD,KAVKkD,SAAUlD,KAAMkD,QAWrBlD,KAVK2C,UAAU3C,KAAKkD,UAgBxBgD,EAAA/F,UAAAqD,iBAAA,SAZGC,GAaCzD,KAZKsC,SAAWmB,EAahBzD,KAZKoC,kBAAkBe,gBAMxB+C,EAAH/F,UAAAuD,WAAG,SAAAC,GAeC3D,KAdKkD,QAAUS,GAGhBuC,EAAH/F,UAAAyD,iBAAG,SAAAC,GAAqD7D,KAAK2C,UAAYkB,GACtEqC,EAAH/F,UAAA2D,kBAAG,SAAAD,GAAgD7D,KAAK6C,WAAagB,KAhDrE,GAiDOqC,EAAP3F,aACEC,KAAMC,EAAAA,UAAWC,OAsBjBC,SArBU,yBAsBVC,SArBU,0TA2BVC,QArBQ,40EA6GRkD,YACEC,QArBSC,EAAAA,kBAsBTC,YArBaC,EAAAA,WAAW,WAAM,OAAA+B,IAsB9B9B,OArBO,IAuBTC,qBArBqB,EAsBrBC,gBArBiBC,EAAAA,wBAAwBC,WAI1C0B,EAADpF,eAAC,WAAA,QAwBAN,KAAMmE,EAAAA,qBArBAuB,EAAPnF,gBAwBAmC,UAvBc1C,KAAMS,EAAAA,QAwBpBqB,WAvBe9B,KAAMS,EAAAA,SClKrB,IAAAkF,EAAA,kBAAA,aAAA,GAEqCA,EAArC5F,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,cAEFC,cACE2E,GAEF1E,SACE0E,OAOHC,EAADrF,eAAC,WAAA,UCdD,IAAAsF,EAAA,SAAAC,GAYA,SAAAD,EAFYE,EAEAC,EACEC,GADd,IAAAC,EAKIJ,EALJK,KAAA1G,OAAAA,YAFYyG,EAAZH,YAAYA,EAEAG,EAAZF,mBAAYA,EACEE,EAAdD,UAAcA,WAXbG,EAADP,EAAAC,GAsBAD,EAAAjG,UAAAyG,sBAAA,SANGC,GAWC,OANO7G,KAAK8G,cAAcF,sBAAsBC,IAapDT,EAAAjG,UAAA4G,qBAAA,SAXGF,GAYC,MAXM,IAAIG,MAAM,8BA1BpB,CAECC,EAAAA,kBA2BMb,EAAP7F,aACEC,KAAMC,EAAAA,UAAWC,OAYjBC,SAXU,iCAYVC,SAXU,6FAMXwF,EAADtF,eAAC,WAAA,QAcAN,KAAM0G,EAAAA,aACN1G,KAAMmE,EAAAA,oBACNnE,KAAM2G,UAAW5G,aAAeC,KAAM4G,EAAAA,WAAc5G,KAAM6G,EAAAA,OAAQ3G,MAAO4G,EAAAA,eAXnElB,EAAPrF,gBAcA+F,gBAboBtG,KAAM+G,EAAAA,UAAW7G,MAAM,mBC3C3C,IAAA8G,EAAA,WAQA,SAAAA,EAAwBC,GAAAzH,KAAxByH,WAAwBA,EALZzH,KAAZ0H,aAA2B,IAAIC,EAAAA,QACnB3H,KAAZ4H,aAA2B,IAAID,EAAAA,QAgD/B,OAvCAH,EAAArH,UAAA0H,MAAA,SAHKzC,GAIGpF,KAHKyH,WAAWK,UAIhB9H,KAHK4H,aAAatH,KAAK8E,GAIvBpF,KAHK4H,aAAaG,WAIlB/H,KAHKgI,kBAAoB,MA6BjCR,EAAArH,UAAA8H,YAAA,WACQ,OALOjI,KAAK4H,aAAaM,gBAUjCV,EAAArH,UAAAgI,YAAA,WACQ,OAPOnI,KAAK0H,aAAaQ,gBASjCV,EApDA,GCJaY,EAA4B,IAAIC,EAAAA,eAAmB,6BCW1DC,GACJC,aAAa,EACbC,cAAe,mBACfC,WAAY,+BACZC,SAAU,QACVC,SAAU,OACVC,UAAW,QACXC,UAAW,QAEbC,EAAA,WAKA,SAAAA,EACYC,EACAC,GADAhJ,KAAZ+I,SAAYA,EACA/I,KAAZgJ,QAAYA,SAOZF,EAAA3I,UAAA8I,KAAA,SALGC,EAAAC,QAAH,IAAAA,IAAGA,MAOC,IALMC,EAKVtG,OAAAuG,UAL2Bf,EAAmBa,GAGpC1B,EAAazH,KAAKsJ,cAAcF,GAEhCG,EAAkBvJ,KAAKwJ,uBAAuB/B,EAAY0B,GAG1DM,EAAYzJ,KAAK0J,qBAAqBR,EAAWK,EAAiB9B,EAAY0B,GASpF,OAFA1B,EALWkC,gBAAgBC,UAAU,SAAAhH,GAAK,OAAA6G,EAAU5B,UAE7C4B,GAGRX,EAAH3I,UAAAmJ,cAAG,SAAAH,GASC,IARMU,EAAgB7J,KAAK8J,iBAAiBX,GAS5C,OAROnJ,KAAKgJ,QAAQe,OAAOF,IAG5Bf,EAAH3I,UAAA2J,iBAAG,SAAAX,GAYC,IAXMa,EAAmBhK,KAAKgJ,QAAQiB,WAYnCC,SACAC,qBACAC,mBAcH,OAvBsB,IAAIC,EAAAA,eAYxB9B,YAXaY,EAAOZ,YAYpBC,cAXeW,EAAOX,cAYtBC,WAXYU,EAAOV,WAYnB6B,eAXgBtK,KAAKgJ,QAAQuB,iBAAiBC,QAY9CR,iBAXkBA,EAYlBtB,SAXUS,EAAOT,SAYjBC,SAXUQ,EAAOR,SAYjBC,UAXWO,EAAOP,UAYlBC,UAXWM,EAAON,aAMrBC,EAAH3I,UAAAsK,sBAAG,SAAAvB,EAAAzB,EAAA0B,EAAAM,GAmBC,IAlBMV,EAAW/I,KAAK0K,eAAevB,EAAQM,GAEvCkB,EAAkB,IAAIC,EAAAA,gBAAgB1B,EAAW,KAAMH,GAqB7D,OApBsCtB,EAAWoD,OAAOF,GAEpCG,UAGrBhC,EAAH3I,UAAAqJ,uBAAG,SAAAR,EAAAG,GAuBC,IAtBMwB,EAAkB,IAAIC,EAAAA,gBAAgBxE,EAA+B,MACrE2E,EAA4D/B,EAAQ6B,OAAOF,GAyBjF,OAFAI,EAtBaD,SAASE,QAAU7B,EAEzB4B,EAAaD,UAGrBhC,EAAH3I,UAAAuJ,qBAAG,SA8BCuB,EACA1B,EACA9B,EACA0B,GAIF,IA7BMM,EAAY,IAAIjC,EAAuBC,GA6C7C,GAbI0B,EA7BOZ,aA8BTd,EA7BWkC,gBAAgBC,UAAU,WA+BjCH,EA7BU5B,UAuCZoD,aA7BkCC,EAAAA,YA8BpC3B,EA7BgBxC,qBA8Bd,IA7BIoE,EAAAA,eAAiBF,EAAyB,MACrCG,UAAWjC,EAAOkC,KAAM5B,UA2BvCA,SA1BS,CA8BL,IA7BMV,EAAW/I,KAAK0K,eAAiBvB,EAASM,GAC1C6B,EAAa/B,EAAgB3C,sBAsBrC,IArBUgE,EAAAA,gBAAA,EAA6CzD,UAAW4B,IA8BhEU,EA7BUzB,kBAAoBsD,EAAWR,SAoC3C,OA7BOrB,GAINX,EAAH3I,UAAAuK,eAAG,SAAAvB,EAAAM,GAkCC,IAjCM8B,EAAkB,IAAIC,QAsC5B,OAHAD,EAjCgBtI,IAAIuE,EAAsBiC,GAkC1C8B,EAjCgBtI,IAAImF,EAA2Be,EAAOkC,MAE/C,IAAII,EAAAA,eAAezL,KAAK+I,SAAUwC,MAtH7C,GAyHOzC,EAAPvI,aACEC,KAAMkL,EAAAA,aAGP5C,EAADhI,eAAC,WAAA,QAoCAN,KAAMmL,EAAAA,WACNnL,KAAMoL,EAAAA,WCjLP,IADCC,EAAA,EAKDC,EAAA,WAcA,SAAAA,EAJqBrC,GAAAzJ,KAArByJ,UAAqBA,EANrBzJ,KAAA+L,UADI,sBAgBJD,EAAA3L,UAAA6L,YAAA,SAPGC,GAQC,IAPMC,EAAgBD,EAAQE,yBAA2BF,EAAQG,8BAS7DF,IACFlM,KAPKqM,aAAeH,EAAcI,iBAhBxC,GAmBOR,EAAPvL,aACEC,KAAM+L,EAAAA,UAAW7L,OAQjBC,SAPU,qEAQV6L,SAPU,yBAQV/H,MACEgI,UAPW,gCAQXC,oBAPqB,YAQrBlM,KAPQ,cAKXsL,EAADhL,eAAC,WAAA,QAUAN,KAAMgH,KAPAsE,EAAP/K,gBAUAgL,YATgBvL,KAAMS,EAAAA,MAAOP,MAAM,gBAUnC2L,eATmB7L,KAAMS,EAAAA,MAAOP,MAAM,gCAUtCiM,cATkBnM,KAAMS,EAAAA,MAAOP,MAAM,6BA0CrC,IAAAkM,EAAA,kBAKA,SApCuBC,GAAA7M,KAAvB6M,WAAuBA,EAgCpB7M,KAAH8M,GAlCQ,8BAAAjB,KAiCR,GA7BOe,EAAPrM,aACEC,KAAM+L,EAAAA,UAAW7L,OAsCjBC,SArCU,yDAsCV6L,SArCU,yBAsCV/H,MACEC,QArCS,kBAsCTqI,OArCQ,UAKXH,EAAD9L,eAAC,WAAA,QAwCAN,KAAM4F,EAA+B7F,aAAeC,KAAM4G,EAAAA,cArCpDwF,EAAP7L,gBAwCA+L,KAvCStM,KAAMS,EAAAA,SA8Df,IAAA+L,EAAA,kBAAA,aAAA,GArD+CA,EAA/CzM,aACEC,KAAM+L,EAAAA,UAAW7L,OAsDjBC,SArDU,2FAsDV8D,MArDMC,QAAU,yBAIjBsI,EAADlM,eAAC,WAAA,UAyED,IAAAmM,EAAA,kBAAA,aAAA,GA/D+CA,EAA/C1M,aACEC,KAAM+L,EAAAA,UAAW7L,OAgEjBC,SA/DU,2FAgEV8D,MA/DMC,QAAU,yBAIjBuI,EAADnM,eAAC,WAAA,UCtGD,IAAAoM,EAAA,WAAA,SAAAA,YAGGA,EAAHC,QACA,WACI,OACEC,SADUF,EAEVnJ,WADW+E,OANjB,GASOoE,EAAP3M,aACEC,KAAMY,EAAAA,SAAUV,OAEhBW,SACEC,EAAAA,aACA+L,EAAAA,cACAC,EAAAA,cAEF/L,cACE6E,EACA0F,EACAc,EACAI,EACAC,GAEFM,iBACEnH,GAEF5E,SACEsK,EACAc,EACAI,EACAC,GAEFlJ,WACE+E,OAIHoE,EAADpM,eAAC,WAAA,UCnCD,IAAA0M,EAAA,kBAAA,aAAA,GAEwCA,EAAxCjN,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,aACA6E,EACAF,EACAL,EACAsH,EAEaC,UADbpI,EACA5D,GAEFK,SACE2E,EACAF,EACAL,EACAsH,EACAnI,EACA5D,OAOHqM,EAAD1M,eAAC,WAAA"}
